(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{307:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[a("a",{attrs:{href:"https://www.wangdoc.com/javascript/operators/arithmetic.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("算术运算符"),a("OutboundLink")],1)]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("运算符是处理数据的基本方法，用来从现有的值得到新的值。"),s("code",[this._v("JavaScript")]),this._v(" 提供了多种运算符，覆盖了所有主要的运算。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_1、概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、概述")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("JavaScript")]),this._v(" 共提供"),s("code",[this._v("10")]),this._v("个算术运算符，用来完成基本的算术运算。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[this._v("加法运算符：x + y\n\n"),s("span",{attrs:{class:"token comment"}},[this._v("# 减法、乘法、除法运算法比较单纯，就是执行相应的数学运算")]),this._v("\n减法运算符： x - y\n乘法运算符： x * y\n除法运算符：x / y\n\n指数运算符：x ** y\n余数运算符：x % y\n自增运算符：++x 或者 x++\n自减运算符：--x 或者 x--\n数值运算符： +x\n负数值运算符：-x\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_2、加法运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、加法运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、加法运算符 +")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("加法运算符（"),a("code",[t._v("+")]),t._v("）是最常见的运算符，用来求两个数值的和。加法运算符是在运行时决定，到底是执行"),a("strong",[t._v("相加")]),t._v("，还是执行"),a("strong",[t._v("连接")]),t._v("。运算子的不同，导致了不同的语法行为，这种现象称为“"),a("strong",[t._v("重载")]),t._v("”（"),a("code",[t._v("overload")]),t._v("）")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("如果是"),s("strong",[this._v("两个字符串相加")]),this._v("，这时加法运算符会变成连接运算符，返回一个新的字符串，将两个原字符串连接在一起。")]),s("li",[this._v("如果"),s("strong",[this._v("一个运算子是字符串，另一个运算子是非字符串")]),this._v("，这时非字符串会转成字符串，再连接在一起。")]),s("li",[s("strong",[this._v("除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 求两个数值的和")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 非数值的相加")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一行是两个布尔值相加，第二行是数值与布尔值相加")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 布尔值都会自动转成数值，然后再相加")]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 将两个原字符串连接在一起")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'bc'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "abc"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 非字符串会转成字符串，再连接在一起。")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "1a"')]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "falsea"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于加法运算符存在重载，可能执行两种运算")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于从左到右的运算次序，字符串的位置不同会导致不同的结果")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'3'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "345"')]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'5'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "75"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 减法、除法和乘法运算符，都是将字符串自动转为数值，然后再运算")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0.5")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_3、对象的相加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、对象的相加","aria-hidden":"true"}},[this._v("#")]),this._v(" 3、对象的相加")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果"),s("strong",[this._v("运算子是对象，必须先转成原始类型的值，然后再相加")]),this._v("。规则如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("首先，自动调用对象的"),a("code",[t._v("valueOf")]),t._v("方法。对象的"),a("code",[t._v("valueOf")]),t._v("方法总是返回对象自身。")]),a("li",[t._v("再自动调用对象的"),a("code",[t._v("toString")]),t._v("方法，将其转为字符串。")]),a("li",[t._v("如果运算子是一个"),a("code",[t._v("Date")]),t._v("对象的实例，那么会优先执行"),a("code",[t._v("toString")]),t._v("方法。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 对象obj转成原始类型的值是[object Object]，再加2")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "[object Object]2"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对象的valueOf方法总是返回对象自身")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// { p: 1 }")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对象的toString方法默认返回[object Object]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" p"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toString")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "[object Object]"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 自己定义valueOf方法或toString方法")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// obj对象的valueOf方法返回1，于是obj + 2就得到了3")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于valueOf方法直接返回一个原始类型的值，所以不再调用toString方法。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valueOf"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 自定义toString方法")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对象obj的toString方法返回字符串hello")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 要有一个运算子是字符串，加法运算符就变成连接运算符，返回连接后的字符串")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  toString"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "hello2"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对象obj是一个Date对象的实例，并且自定义了valueOf方法和toString方法，结果toString方法优先执行")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("valueOf")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'hello'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_4、余数运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、余数运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 4、余数运算符 %")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("余数运算符（"),s("code",[this._v("%")]),this._v("）返回"),s("strong",[this._v("前一个运算子被后一个运算子除，所得的余数。运算结果的正负号由第一个运算子的正负号决定。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("余数运算符还可以用于浮点数的运算。但是，由于浮点数不是精确的值，无法得到完全准确的结果。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("12")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正负号由第一个运算子的正负号决定")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 为了得到负数的正确余数值，可以先使用绝对值函数")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 错误的写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正确的写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("abs")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("isOdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 浮点数不是精确的值，无法得到完全准确的结果。")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("6.5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2.1")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_5、自增运算符-，自减运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、自增运算符-，自减运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 5、自增运算符 ++ ，自减运算符--")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("自增和自减运算符，是一元运算符，"),s("strong",[this._v("只需要一个运算子。它们的作用是将运算子首先转为数值，然后加上1或者减去1。它们会修改原始变量。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("运算之后，变量的值发生变化，这种效应叫做运算的"),a("strong",[t._v("副作用")]),t._v("（"),a("code",[t._v("side effect")]),t._v("）。"),a("strong",[t._v("自增和自减运算符是仅有的两个具有副作用的运算符")]),t._v("，其他运算符都不会改变变量的值。")]),a("li",[t._v("自增和自减运算符有一个需要注意的地方，就是放在变量之后，会先返回变量操作前的值，再进行自增/自减操作；放在变量之前，会先进行自增/自减操作，再返回变量操作后的值。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 变量x自增后，返回2，再进行自减，返回1")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 原始变量x的值发生改变")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("x "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nx "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("x "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nx "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// x是先返回当前值，然后自增，所以得到1；y是先自增，然后返回新的值，所以得到2。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nx"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("y "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_6、数值运算符-，负数值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、数值运算符-，负数值运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 6、数值运算符 +，负数值运算符 -")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("数值运算符（"),s("code",[this._v("+")]),this._v("）同样使用加号，但它是一元运算符（只需要一个操作数），而加法运算符是二元运算符（需要两个操作数）。数值运算符的作用在于可以"),s("strong",[this._v("将任何值转为数值（与"),s("code",[this._v("Number")]),this._v("函数的作用相同）")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 非数值经过数值运算符以后，都变成了数值")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("Number")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("负数值运算符（"),s("code",[this._v("-")]),this._v("），也同样具有将一个值转为数值的功能，只不过得到的值正负相反。连用两个负数值运算符，等同于数值运算符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 最后一行的圆括号不可少，否则会变成自减运算符")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("x "),a("span",{attrs:{class:"token comment"}},[t._v("// -1")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("数值运算符号和负数值运算符，都会返回一个新的值，而不会改变原始变量的值。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_7、指数运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、指数运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 7、指数运算符 **")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("指数运算符（"),s("code",[this._v("**")]),this._v("）完成指数运算，"),s("strong",[this._v("前一个运算子是底数，后一个运算子是指数")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("指数运算符是右结合，而不是左结合")]),this._v("。即多个指数运算符连用时，先进行最右边的计算。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 16")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 指数运算符是右结合，所以先计算第二个指数运算符")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于")]),t._v("\nMath"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pow")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("9")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_8、赋值运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、赋值运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 8、赋值运算符 =")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("赋值运算符（"),s("code",[this._v("Assignment Operators")]),this._v("）用于给变量赋值。最常见的赋值运算符，当然就是等号（"),s("code",[this._v("=")]),this._v("）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("赋值运算符还可以与其他运算符结合，形成变体。")]),s("li",[this._v("复合的赋值运算符，都是先进行指定运算，然后将得到值返回给左边的变量")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 将 1 赋值给变量 x")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 将变量 y 的值赋值给变量 x")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 与 算术运算符 的结合形成变体")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x + y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("-=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x - y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("*=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x * y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("/=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x / y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("%=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x % y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("**=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x ** y")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 下面是与 位运算符 的结合")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v(">>=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x >> y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("<<=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x << y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v(">>>=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x >>> y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("&=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x & y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("|=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x | y")]),t._v("\n\nx "),a("span",{attrs:{class:"token operator"}},[t._v("^=")]),t._v(" y "),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 x = x ^ y")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);