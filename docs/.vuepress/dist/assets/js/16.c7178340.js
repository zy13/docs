(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{167:function(_,v,t){_.exports=t.p+"assets/img/storage.5f1d2bf7.png"},168:function(_,v,t){_.exports=t.p+"assets/img/fromURLtoHTMLshow.drawio.d863e989.png"},325:function(_,v,t){"use strict";t.r(v);var e=[function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("div",{staticClass:"content"},[e("h2",{attrs:{id:"☆-虚拟dom提高性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-虚拟dom提高性能","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-虚拟DOM提高性能")]),e("ul",[e("li",[e("p",[_._v("虚拟 "),e("code",[_._v("dom")]),_._v(" 相当于在 "),e("code",[_._v("js")]),_._v(" 和真实 "),e("code",[_._v("dom")]),_._v(" 中间加了一个缓存，利用 "),e("code",[_._v("dom diff")]),_._v(" 算法避免了没有必\n要的 "),e("code",[_._v("dom")]),_._v(" 操作，从而提高性能。")])]),e("li",[e("p",[_._v("用 "),e("code",[_._v("JavaScript")]),_._v(" 对象结构表示 "),e("code",[_._v("DOM")]),_._v(" 树的结构；然后用这个树构建一个真正的 "),e("code",[_._v("DOM")]),_._v(" 树，插到文档当中，当状态变更的时候，重新构造一棵新的对象树。")])]),e("li",[e("p",[_._v("然后用新的树和旧的树进行比较，记录两棵树差异：把 "),e("code",[_._v("2")]),_._v(" 所记录的差异应用到步骤 "),e("code",[_._v("1")]),_._v(" 所构建的真正的 "),e("code",[_._v("DOM")]),_._v(" 树上，视图就更新了。")])])]),e("h2",{attrs:{id:"☆-virtual-dom的优势在哪里"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-virtual-dom的优势在哪里","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-Virtual DOM的优势在哪里")]),e("h3",{attrs:{id:"virtual-dom-的优势"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom-的优势","aria-hidden":"true"}},[_._v("#")]),_._v(" Virtual Dom 的优势")]),e("p",[_._v("其实这道题目面试官更想听到的答案不是上来就说 "),e("strong",[_._v("直接操作/频繁操作DOM 的性能差")]),_._v("，如果 "),e("code",[_._v("DOM")]),_._v(" 操作的性能如此不堪，那么 "),e("code",[_._v("jQuery")]),_._v(" 也不至于活到今天。")]),e("p",[_._v("所以面试官更想听到 "),e("code",[_._v("VDOM")]),_._v(" 想解决的问题，以及为什么频繁的 "),e("code",[_._v("DOM")]),_._v(" 操作会性能差。")]),e("p",[e("strong",[_._v("首先")]),_._v("我们需要知道：")]),e("ul",[e("li",[e("code",[_._v("DOM")]),_._v(" 渲染引擎、"),e("code",[_._v("JS")]),_._v(" 引擎 相互独立，但又工作在同一线程（主线程）")]),e("li",[e("code",[_._v("JS")]),_._v(" 代码调用 "),e("code",[_._v("DOM API")]),_._v("时，必须挂起 "),e("code",[_._v("JS")]),_._v(" 引擎，转换传入参数数据、激活 "),e("code",[_._v("DOM")]),_._v(" 渲染引擎，")]),e("li",[e("code",[_._v("DOM")]),_._v(" 重绘后再转换可能有的返回值，最后激活 "),e("code",[_._v("JS")]),_._v(" 引擎并继续执行")]),e("li",[_._v("若有频繁的 "),e("code",[_._v("DOM API")]),_._v(" 调用，且浏览器厂商不做“批量处理”优化， 引擎间切换的单位代价将迅速积累")]),e("li",[_._v("若其中有强制重绘的 "),e("code",[_._v("DOM API")]),_._v(" 调用，重新计算布局、重新绘制图像会引起更大的性能消耗。")])]),e("p",[e("strong",[_._v("其次")]),_._v("，"),e("strong",[e("code",[_._v("VDOM")]),_._v(" 和真实 "),e("code",[_._v("DOM")]),_._v(" 的区别和优化")]),_._v("：")]),e("ul",[e("li",[_._v("虚拟 "),e("code",[_._v("DOM")]),_._v(" 不会立马进行排版与重绘操作")]),e("li",[_._v("虚拟 "),e("code",[_._v("DOM")]),_._v(" 进行频繁修改，然后一次性比较并修改真实 "),e("code",[_._v("DOM")]),_._v(" 中需要改的部分，")]),e("li",[_._v("最后在真实"),e("code",[_._v("DOM")]),_._v(" 中进行排版与重绘，减少过多"),e("code",[_._v("DOM")]),_._v("节点排版与重绘损耗")]),e("li",[_._v("虚拟 "),e("code",[_._v("DOM")]),_._v(" 有效降低大面积真实 "),e("code",[_._v("DOM")]),_._v(" 的重绘与排版，因为最终与真实 "),e("code",[_._v("DOM")]),_._v("比较差异，可以只渲染局部")])]),e("h2",{attrs:{id:"☆-url和uri的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-url和uri的区别","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-URL和URI的区别")]),e("p",[e("code",[_._v("URI: Uniform Resource Identifier")]),_._v(" 指的是"),e("strong",[_._v("统一资源标识符")])]),e("p",[e("code",[_._v("URL: Uniform Resource Location")]),_._v(" 指的是"),e("strong",[_._v("统一资源定位符")])]),e("p",[e("code",[_._v("URI")]),_._v(" 指的是"),e("strong",[_._v("统一资源标识符")]),_._v("，用唯一的标识来确定一个资源，它是一种抽象的定义，也就是说，不管使用什么方法来定义，只要能唯一的标识一个资源，就可以称为 "),e("code",[_._v("URI")]),_._v("。")]),e("p",[e("code",[_._v("URL")]),_._v(" 指的是"),e("strong",[_._v("统一资源定位符")]),_._v("，"),e("code",[_._v("URN")]),_._v("指的是统一资源名称。"),e("code",[_._v("URL")]),_._v(" 和 "),e("code",[_._v("URN")]),_._v(" 是 "),e("code",[_._v("URI")]),_._v(" 的子集，"),e("code",[_._v("URL")]),_._v(" 可以理解为使用地址来标识资源。")]),e("h2",{attrs:{id:"☆-如何实现图片懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-如何实现图片懒加载","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-如何实现图片懒加载")]),e("p",[e("strong",[_._v("懒加载")]),_._v("也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。")]),e("p",[e("strong",[_._v("它适用于图片很多，页面很长的电商网站的场景")]),_._v("。")]),e("p",[_._v("懒加载的实现"),e("strong",[_._v("原理")]),_._v("是，将页面上的图片的 "),e("code",[_._v("src")]),_._v(" 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 "),e("code",[_._v("src")]),_._v(" 属性，以此来实现图片的延迟加载。")]),e("h2",{attrs:{id:"☆-优雅降级和渐进增强"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-优雅降级和渐进增强","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-优雅降级和渐进增强")]),e("p",[e("strong",[_._v("渐进增强")]),_._v("( "),e("code",[_._v("progressive enhancement")]),_._v(")：针对低版本浏览器进行构建页面，保证最基本的功能，\n然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。")]),e("p",[e("strong",[_._v("优雅降级")]),_._v("("),e("code",[_._v("graceful degradation")]),_._v(") ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。")]),e("p",[e("strong",[_._v("区别")]),_._v("：")]),e("ul",[e("li",[_._v("(1) 优雅降级是从复杂的现状开始，并试图减少用户体验的供给")]),e("li",[_._v("(2) 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要\n"),e("code",[_._v("function foo(){//code... }()")]),_._v("定义预格式文本，保持文本原有的格式")]),e("li",[_._v("(3) 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带")])]),e("h2",{attrs:{id:"☆-前端需要注意哪些seo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-前端需要注意哪些seo","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-前端需要注意哪些SEO")]),e("ul",[e("li",[_._v("（1）合理的 "),e("code",[_._v("title")]),_._v("、"),e("code",[_._v("description")]),_._v("、"),e("code",[_._v("keywords")]),_._v("：搜索对着三项的权重逐个减小，\n"),e("ul",[e("li",[e("code",[_._v("title")]),_._v(" 值强调重点即可，重要关键词出现不要超过"),e("code",[_._v("2")]),_._v("次，而且要靠前，不同页面 "),e("code",[_._v("title")]),_._v(" 要有所不同；")]),e("li",[e("code",[_._v("description")]),_._v(" 把页面内容高度 概括，长度合适，不可过分堆砌关键词，不同页面 "),e("code",[_._v("description")]),_._v(" 有所不同；")]),e("li",[e("code",[_._v("keywords")]),_._v(" 列举出重要 关键词即可。")])])]),e("li",[_._v("（2）语义化的 "),e("code",[_._v("HTML")]),_._v(" 代码，符合 "),e("code",[_._v("W3C")]),_._v(" 规范：语义化代码让搜索引擎容易理解网页。")]),e("li",[_._v("（3）重要内容 "),e("code",[_._v("HTML")]),_._v(" 代码放在最前：搜索引擎抓取 "),e("code",[_._v("HTML")]),_._v(" 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容肯定被抓取。")]),e("li",[_._v("（4）重要内容不要用 "),e("code",[_._v("js")]),_._v(" 输出：爬虫不会执行 "),e("code",[_._v("js")]),_._v(" 获取内容")]),e("li",[_._v("（5）少用 "),e("code",[_._v("iframe")]),_._v("：搜索引擎不会抓取 "),e("code",[_._v("iframe")]),_._v(" 中的内容")]),e("li",[_._v("（6）非装饰性图片必须加 "),e("code",[_._v("alt")])]),e("li",[_._v("（7）提高网站速度：网站速度是搜索引擎排序的一个重要指标")])]),e("h2",{attrs:{id:"☆-首屏和白屏时间如何计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-首屏和白屏时间如何计算","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-首屏和白屏时间如何计算")]),e("p",[e("strong",[_._v("首屏")]),_._v("时间的计算，可以由 "),e("code",[_._v("Native WebView")]),_._v(" 提供的类似 "),e("code",[_._v("onload")]),_._v(" 的方法实现，在 "),e("code",[_._v("ios")]),_._v(" 下对应的是\n"),e("code",[_._v("webViewDidFinishLoad")]),_._v("，在 "),e("code",[_._v("android")]),_._v(" 下对应的是"),e("code",[_._v("onPageFinished")]),_._v("事件。")]),e("p",[e("strong",[_._v("白屏")]),_._v("的定义有多种。可以认为“没有任何内容”是白屏，可以认为“网络或服务异常”是白屏，可以认为“数据加载中”是白\n屏，可以认为“图片加载不出来”是白屏。")]),e("p",[_._v("场景不同，白屏的计算方式就不相同。")]),e("ul",[e("li",[e("strong",[_._v("方法1")]),_._v("：当页面的元素数小于"),e("code",[_._v("x")]),_._v("时，则认为页面白屏。比如“没有任何内容”，可以获取页面的"),e("code",[_._v("DOM")]),_._v("\n节点数，判断"),e("code",[_._v("DOM")]),_._v("节点数少于某个阈值"),e("code",[_._v("X")]),_._v("，则认为白屏。")]),e("li",[e("strong",[_._v("方法2")]),_._v("：当页面出现业务定义的错误码时，则认为是白屏。比如“网络或服务异常”。")]),e("li",[e("strong",[_._v("方法3")]),_._v("：当页面出现业务定义的特征值时，则认为是白屏。比如“数据加载中”。")])]),e("h2",{attrs:{id:"☆-cookie的作用和弊端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-cookie的作用和弊端","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-Cookie的作用和弊端")]),e("h3",{attrs:{id:"cookie作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie作用","aria-hidden":"true"}},[_._v("#")]),_._v(" cookie作用")]),e("ul",[e("li",[e("p",[_._v("1.可以在客户端上保存用户数据，起到简单的缓存和用户身份识别等作用。")])]),e("li",[e("p",[_._v("2.保存用户的登陆状态，用户进行登陆，成功登陆后，服务器生成特定的cookie返回给客户端，客户端下次访问该域名下的任何页面，将该cookie的信息发送给服务器，服务器经过检验，来判断用户是否登陆。")])]),e("li",[e("p",[_._v("3.记录用户的行为。")])])]),e("h3",{attrs:{id:"cookie弊端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie弊端","aria-hidden":"true"}},[_._v("#")]),_._v(" cookie弊端")]),e("ul",[e("li",[_._v("1.增加流量消耗，每次请求都需要带上"),e("code",[_._v("cookie")]),_._v("信息。")]),e("li",[_._v("2.安全性隐患，"),e("code",[_._v("cookie")]),_._v("使用明文传输。如果"),e("code",[_._v("cookie")]),_._v("被人拦截了，那人就可以取得所有的"),e("code",[_._v("session")]),_._v("信息。")]),e("li",[_._v("3."),e("code",[_._v("Cookie")]),_._v("数量和长度的限制。每个"),e("code",[_._v("domain")]),_._v("最多只能有"),e("code",[_._v("20")]),_._v("条"),e("code",[_._v("cookie")]),_._v("，每个"),e("code",[_._v("cookie")]),_._v("长度不能超过"),e("code",[_._v("4KB")]),_._v("，否则会被截掉。")]),e("li",[_._v("4.缺乏数据操作接口，浏览器端获取和设置"),e("code",[_._v("cookie")]),_._v("只能通过"),e("code",[_._v("document.cookie")]),_._v("实现。")])]),e("h2",{attrs:{id:"♥-浏览器输入url到页面呈现出来的过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#♥-浏览器输入url到页面呈现出来的过程","aria-hidden":"true"}},[_._v("#")]),_._v(" ♥-浏览器输入url到页面呈现出来的过程")]),e("p",[e("img",{attrs:{src:t(168),alt:"img"}})]),e("ul",[e("li",[e("p",[e("strong",[_._v("1、输入 "),e("code",[_._v("url")]),_._v(" 后，首先需要找到这个 "),e("code",[_._v("url")]),_._v(" 域名的服务器 "),e("code",[_._v("ip")])]),_._v(",")]),e("ul",[e("li",[e("strong",[_._v("ip")]),_._v(" 查找过程：缓存 -> "),e("strong",[_._v("hosts")]),_._v(" -> "),e("strong",[_._v("DNS")]),e("ul",[e("li",[_._v("为了寻找这个 "),e("strong",[_._v("ip")]),_._v(" ，浏览器首先会寻找 "),e("strong",[_._v("缓存")]),_._v("，查看缓存中是否有记录，缓存的查找记录为：浏览器缓存 -》 系统缓存 -》 路由器缓存，")]),e("li",[_._v("缓存中没有则查找系统的 "),e("strong",[_._v("hosts")]),_._v(" 文件中是否有记录，")]),e("li",[_._v("如果没有则查询 "),e("strong",[_._v("DNS")]),_._v(" 服务器，")])])])])]),e("li",[e("p",[e("strong",[_._v("2、得到服务器的"),e("code",[_._v("ip")]),_._v("地址后，浏览器根据这个"),e("code",[_._v("ip")]),_._v("以及相应的端口号，构造一个 "),e("code",[_._v("http")]),_._v(" 请求，")])]),e("ul",[e("li",[_._v("这个"),e("strong",[_._v("请求报文")]),_._v("会包括这次请求的信息，\n"),e("ul",[e("li",[_._v("主要是请求方法，请求说明和请求附带的数据，")])])]),e("li",[_._v("并将这个 "),e("strong",[_._v("http")]),_._v(" 请求封装在一个 "),e("strong",[_._v("tcp")]),_._v(" 包中，\n"),e("ul",[e("li",[_._v("这个 "),e("strong",[_._v("tcp")]),_._v(" 包会依次经过传输层，网络层，数据链路层，物理层到达服务器，")])])])])]),e("li",[e("p",[e("strong",[_._v("3、服务器解析这个请求来作出响应，返回相应的 "),e("code",[_._v("html")]),_._v(" 给浏览器，")])]),e("ul",[e("li",[_._v("分析客户端请求")]),e("li",[_._v("根据分析结果处理业务逻辑")]),e("li",[_._v("响应处理结果，如返回相应的html")])])]),e("li",[e("p",[e("strong",[_._v("4、因为"),e("code",[_._v("html")]),_._v("是一个树形结构，浏览器根据这个"),e("code",[_._v("html")]),_._v("来构建 "),e("code",[_._v("DOM")]),_._v(" 树，")])]),e("ul",[e("li",[_._v("在 "),e("strong",[_._v("dom")]),_._v(" 树的构建过程中如果遇到 "),e("strong",[_._v("JS")]),_._v(" 脚本和外部 "),e("strong",[_._v("JS")]),_._v(" 连接，则会停止构建 "),e("strong",[_._v("DOM")]),_._v(" 树来执行和下载相应的代码，这会造成阻塞，")]),e("li",[_._v("这就是为什么推荐 "),e("strong",[_._v("JS")]),_._v(" 代码应该放在 "),e("strong",[_._v("html")]),_._v(" 代码的后面，")])])]),e("li",[e("p",[e("strong",[_._v("5、之后根据外部样式，内部样式，内联样式构建一个"),e("code",[_._v("CSS")]),_._v("对象模型树 "),e("code",[_._v("CSSOM")]),_._v(" 树，构建完成后和"),e("code",[_._v("DOM")]),_._v("树合并为渲染树，")])]),e("ul",[e("li",[_._v("这里主要做的是排除非视觉节点，比如 "),e("strong",[_._v("script")]),_._v("， "),e("strong",[_._v("meta")]),_._v(" 标签和排除 "),e("strong",[_._v("display")]),_._v(" 为 "),e("strong",[_._v("none")]),_._v(" 的节点，之后进行布局，")]),e("li",[_._v("布局主要是确定各个元素的位置和尺寸，")])])]),e("li",[e("p",[e("strong",[_._v("6、之后是渲染页面，")])]),e("ul",[e("li",[_._v("因为 "),e("strong",[_._v("html")]),_._v(" 文件中会含有图片，视频，音频等资源，")]),e("li",[_._v("在解析 "),e("strong",[_._v("DOM")]),_._v(" 的过程中，遇到这些都会进行并行下载，")]),e("li",[_._v("浏览器对每个域的并行下载数量有一定的限制，一般是 "),e("strong",[_._v("4-6")]),_._v(" 个，")])])]),e("li",[e("p",[e("strong",[_._v("7、当然在这些所有的请求中我们还需要关注的就是缓存，缓存一般通过 "),e("code",[_._v("Cache-Control")]),_._v("、"),e("code",[_._v("Last-Modify")]),_._v("、"),e("code",[_._v("Expires")]),_._v(" 等首部字段控制。")])]),e("ul",[e("li",[e("strong",[_._v("Cache-Control")]),_._v(" 和 "),e("strong",[_._v("Expires")]),_._v(" 的区别在于\n"),e("ul",[e("li",[e("strong",[_._v("Cache-Control")]),_._v(" 使用相对时间，")]),e("li",[e("strong",[_._v("Expires")]),_._v(" 使用的是基于服务器端的绝对时间，")])])]),e("li",[_._v("因为存在时差问题，一般采用 "),e("strong",[_._v("Cache-Control")]),_._v("，")])])]),e("li",[e("p",[e("strong",[_._v("8、在请求这些有设置了缓存的数据时，会先查看是否过期，")])]),e("ul",[e("li",[e("p",[_._v("如果没有过期则直接使用本地缓存，")])]),e("li",[e("p",[_._v("过期则请求并在服务器校验文件是否修改，")]),e("ul",[e("li",[_._v("如果上一次响应设置了 "),e("strong",[_._v("ETag")]),_._v(" 值，会在这次请求的时候作为 "),e("strong",[_._v("If-None-Match")]),_._v(" 的值交给服务器校验，")]),e("li",[_._v("如果一致，继续校验 "),e("strong",[_._v("Last-Modified")]),_._v("，没有设置 "),e("strong",[_._v("ETag")]),_._v(" 则直接验证 "),e("strong",[_._v("Last-Modified")]),_._v("，再决定是否返回 "),e("strong",[_._v("304")])])]),e("p",[e("img",{attrs:{src:t(167),alt:"img"}})])])])])]),e("h2",{attrs:{id:"☆-跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-跨域","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-跨域")]),e("p",[_._v("因为浏览器出于安全考虑，有同源策略。也就是说，如果"),e("strong",[_._v("协议、域名或者端口")]),_._v("有一个不同就是跨域，\nAjax 请求会失败。防止CSRF攻击。")]),e("h3",{attrs:{id:"_1-jsonp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-jsonp","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.JSONP")]),e("p",[_._v("JSONP的原理很简单，就是利用"),e("code",[_._v("<script><\/script>")]),_._v("标签没有跨域限制的漏洞。 通过"),e("code",[_._v("<script><\/script>")]),_._v("标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。")]),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{attrs:{class:"token comment"}},[_._v("\x3c!-- JSONP 使用简单且兼容性不错，但是只限于 get 请求。 --\x3e")]),_._v("\n"),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[_._v("<")]),_._v("script")]),e("span",{attrs:{class:"token punctuation"}},[_._v(">")])]),e("span",{attrs:{class:"token script language-javascript"}},[_._v("\n  "),e("span",{attrs:{class:"token keyword"}},[_._v("function")]),_._v(" "),e("span",{attrs:{class:"token function"}},[_._v("jsonp")]),e("span",{attrs:{class:"token punctuation"}},[_._v("(")]),_._v("data"),e("span",{attrs:{class:"token punctuation"}},[_._v(")")]),_._v(" "),e("span",{attrs:{class:"token punctuation"}},[_._v("{")]),_._v("\n    console"),e("span",{attrs:{class:"token punctuation"}},[_._v(".")]),e("span",{attrs:{class:"token function"}},[_._v("log")]),e("span",{attrs:{class:"token punctuation"}},[_._v("(")]),_._v("data"),e("span",{attrs:{class:"token punctuation"}},[_._v(")")]),_._v("\n  "),e("span",{attrs:{class:"token punctuation"}},[_._v("}")]),_._v("\n")]),e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token tag"}},[e("span",{attrs:{class:"token punctuation"}},[_._v("</")]),_._v("script")]),e("span",{attrs:{class:"token punctuation"}},[_._v(">")])]),_._v("\n")])])]),e("h3",{attrs:{id:"_2-cors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-cors","aria-hidden":"true"}},[_._v("#")]),_._v(" 2. CORS")]),e("p",[_._v("CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 "),e("code",[_._v("XDomainRequest")]),_._v(" 来实现。")]),e("h3",{attrs:{id:"_3-document-domain"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-document-domain","aria-hidden":"true"}},[_._v("#")]),_._v(" 3. document.domain")]),e("p",[_._v("该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。只需要给页面添加 document.domain = 'test.com' 表示二级域名都相同就可以实现跨域")]),e("h3",{attrs:{id:"_4-webpack配置proxytable设置开发环境跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-webpack配置proxytable设置开发环境跨域","aria-hidden":"true"}},[_._v("#")]),_._v(" 4. webpack配置proxyTable设置开发环境跨域")]),e("h3",{attrs:{id:"_5-nginx代理跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-nginx代理跨域","aria-hidden":"true"}},[_._v("#")]),_._v(" 5. nginx代理跨域")]),e("h3",{attrs:{id:"_6-iframe跨域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-iframe跨域","aria-hidden":"true"}},[_._v("#")]),_._v(" 6. iframe跨域")]),e("h3",{attrs:{id:"_7-postmessage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-postmessage","aria-hidden":"true"}},[_._v("#")]),_._v(" 7. postMessage")]),e("p",[_._v("这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息")]),e("h2",{attrs:{id:"☆-前端性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-前端性能优化","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-前端性能优化")]),e("p",[_._v("三个方面来说明前端性能优化：")]),e("h3",{attrs:{id:"一：-webapck优化与开启gzip压缩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一：-webapck优化与开启gzip压缩","aria-hidden":"true"}},[_._v("#")]),_._v(" 一： webapck优化与开启gzip压缩")]),e("ul",[e("li",[_._v("1.babel-loader用 include 或 exclude来帮我们避免不必要的转译，不转译node_moudules中的js文件 其次在缓存当前转译的js文件，设置\nloader: 'babel-loader?cacheDirectory=true'")]),e("li",[_._v("2.文件采用按需加载等等")]),e("li",[_._v("3.具体的做法非常简单，只需要你在你的 request headers 中加上这么一句： accept-encoding:gzip")]),e("li",[_._v("4.图片优化，采用svg图片或者字体图标")]),e("li",[_._v("5.浏览器缓存机制，它又分为强缓存和协商缓存")])]),e("h3",{attrs:{id:"二：本地存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二：本地存储","aria-hidden":"true"}},[_._v("#")]),_._v(" 二：本地存储")]),e("p",[_._v("从 Cookie 到 Web Storage、IndexedDB 说明一下SessionStorage和localStorage还有cookie的区别和优缺点")]),e("h3",{attrs:{id:"三：代码优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三：代码优化","aria-hidden":"true"}},[_._v("#")]),_._v(" 三：代码优化")]),e("ul",[e("li",[_._v("1.事件代理")]),e("li",[_._v("2.事件的节流和防抖")]),e("li",[_._v("3.页面的回流和重绘")]),e("li",[_._v("4.EventLoop事件循环机制")]),e("li",[_._v("5.代码优化等等")])]),e("h2",{attrs:{id:"☆-移动端性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-移动端性能优化","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-移动端性能优化")]),e("ul",[e("li",[_._v("尽量使用css3动画，开启硬件加速")]),e("li",[_._v("适当使用touch时间代替click时间")]),e("li",[_._v("避免使用css3渐变阴影效果")]),e("li",[_._v("可以用transform: translateZ(0) 来开启硬件加速")]),e("li",[_._v("不滥用float。float在渲染时计算量比较大，尽量减少使用")]),e("li",[_._v("不滥用web字体。web字体需要下载，解析，重绘当前页面")]),e("li",[_._v("合理使用requestAnimationFrame动画代替setTimeout")]),e("li",[_._v("css中的属性（css3 transitions、css3 3D transforms、opacity、webGL、video）会触发GUP渲\n染，耗电")])]),e("h2",{attrs:{id:"☆-浏览器缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-浏览器缓存","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-浏览器缓存")]),e("p",[_._v("缓存可以减少网络 IO 消耗，提高访问速度。")]),e("p",[_._v("浏览器缓存是一种操作简单、效果显著的前端性能优化手段")]),e("p",[_._v("很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。")]),e("p",[_._v("但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：")]),e("ul",[e("li",[_._v("Memory Cache")]),e("li",[_._v("Service Worker Cache")]),e("li",[_._v("HTTP Cache")]),e("li",[_._v("Push Cache")])]),e("p",[_._v("缓存它又分为强缓存和协商缓存。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓\n存")]),e("ul",[e("li",[e("strong",[_._v("实现强缓存")]),_._v("：过去我们一直用 expires。当服务器返回响应时，在 Response Headers 中将过期时\n间写入 expires 字段，现在一般使用Cache-Control 两者同时出现使用Cache-Control")]),e("li",[e("strong",[_._v("协商缓存")]),_._v("：Last-Modified 是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着\nResponse Headers 返回：每次请求去判断这个时间戳是否发生变化。从而去决定你是304读取缓\n存还是给你返回最新的数据。")])]),e("h2",{attrs:{id:"☆-websocket和ajax轮询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#☆-websocket和ajax轮询","aria-hidden":"true"}},[_._v("#")]),_._v(" ☆-websocket和ajax轮询")]),e("ul",[e("li",[e("strong",[_._v("websocket")]),_._v("是html5中提出的新的协议，可以实现客户端与服务器的通信，实现服务器的推送功能")]),e("li",[_._v("优点是，只要经过一次连接，就可以连续不断的得到服务器推送消息，节省带宽和服务器端的压力")]),e("li",[e("strong",[_._v("ajax轮询")]),_._v("模拟常连接就是每隔一段时间（0.5s）就向服务器发起ajax请求，查询服务器是否有数据更新")]),e("li",[_._v("缺点就是，每次都要建立HTTP连接，即使需要传输的数据非常少，浪费带宽")])]),e("h2",{attrs:{id:"回流（reflow）与重绘（repaint）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回流（reflow）与重绘（repaint）","aria-hidden":"true"}},[_._v("#")]),_._v(" 回流（Reflow）与重绘（Repaint）")]),e("p",[e("strong",[_._v("回流")]),_._v("：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素\n等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影\n响），然后再将计算的结果绘制出来。这个过程就是回流（"),e("strong",[_._v("也叫重排")]),_._v("）。")]),e("p",[e("strong",[_._v("重绘")]),_._v("：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背\n景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示\n的回流环节）。这个过程叫做重绘。")]),e("p",[e("strong",[_._v("重绘不一定导致回流，回流一定会导致重绘")])]),e("p",[_._v("硬要比较的话，回流比重绘做的事情更多，带来的开销也更大。但这两个说到底都是吃性能的，\n所以都不是什么善茬。我们在开发中，要从代码层面出发，尽可能把回流和重绘的次数最小化")])])}],a=t(1),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},e,!1,null,null,null);v.default=s.exports}}]);