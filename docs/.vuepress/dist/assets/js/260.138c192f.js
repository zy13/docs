(window.webpackJsonp=window.webpackJsonp||[]).push([[260],{573:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("ul",[a("li",[a("router-link",{attrs:{to:"/javascript-wd/4-standard/10-regexp.html"}},[t._v("标准库-RegExp对象")])],1),a("li",[a("a",{attrs:{href:"https://wangdoc.com/es6/regex.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("正则的扩展"),a("OutboundLink")],1)])]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),a("p",[t._v("所谓行终止符，就是该字符表示一行的终结。以下四个字符属于“行终止符”。")]),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),a("p",[t._v("JavaScript 语言的正则表达式，只支持先行断言（lookahead）和先行否定断言（negative lookahead），不支持后行断言（lookbehind）和后行否定断言（negative lookbehind）。ES2018 引入后行断言，V8 引擎 4.9 版（Chrome 62）已经支持。")]),t._m(40),t._m(41),t._m(42),a("p",[t._v("使用后行断言进行字符串替换。")]),t._m(43),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),a("p",[t._v("有了具名组匹配以后，可以使用解构赋值直接从匹配结果上为变量赋值。")]),t._m(58),t._m(59),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_1-regexp-构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-regexp-构造函数","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. RegExp 构造函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 ES5 中，"),s("code",[this._v("RegExp")]),this._v("构造函数的参数有两种情况。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（"),s("code",[this._v("flag")]),this._v("）。")]),s("li",[this._v("第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES6 改变了这种行为。如果"),s("code",[this._v("RegExp")]),this._v("构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xyz'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// Uncaught TypeError")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 原有正则对象的修饰符是ig，它会被第二个参数i覆盖。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/abc/ig")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{attrs:{class:"token comment"}},[t._v("// 'i'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_2-字符串的正则方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-字符串的正则方法","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 字符串的正则方法")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES6 出现之前，字符串对象共有 "),s("code",[this._v("4")]),this._v(" 个方法，可以使用正则表达式：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("match()")])]),s("li",[s("code",[this._v("replace()")])]),s("li",[s("code",[this._v("search()")])]),s("li",[s("code",[this._v("split()")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES6 将这 "),s("code",[this._v("4")]),this._v(" 个方法，在语言内部全部调用"),s("code",[this._v("RegExp")]),this._v("的实例方法，从而做到所有与正则相关的方法，全都定义在"),s("code",[this._v("RegExp")]),this._v("对象上。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("String.prototype.match")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.match]")])]),a("li",[a("code",[t._v("String.prototype.replace")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.replace]")])]),a("li",[a("code",[t._v("String.prototype.search")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.search]")])]),a("li",[a("code",[t._v("String.prototype.split")]),t._v(" 调用 "),a("code",[t._v("RegExp.prototype[Symbol.split]")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 字符串的正则表达式方法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abca22a'")]),t._v("\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replaceAll")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token string"}},[t._v("'-'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "-bc-22-"')]),t._v("\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/\\d/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["2", "2"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式的方法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abca22a'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("replace"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'-'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "-bc-22-"')]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("g"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["2", "2"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_3-u-修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-u-修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. u 修饰符")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("ES6 对正则表达式添加了"),a("code",[t._v("u")]),t._v("修饰符，含义为“Unicode 模式”，用来正确处理大于"),a("code",[t._v("\\uFFFF")]),t._v("的 "),a("code",[t._v("Unicode")]),t._v(" 字符。也就是说，会正确处理四个字节的 "),a("code",[t._v("UTF-16")]),t._v(" 编码。一旦加上"),a("code",[t._v("u")]),t._v("修饰符号，就会修改下面这些正则表达式的行为。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("strong",[t._v("（1）点字符"),a("code",[t._v(".")])]),t._v(" ：含义是除了换行符以外的任意单个字符。对于码点大于"),a("code",[t._v("0xFFFF")]),t._v("的 Unicode 字符，点字符不能识别，必须加上"),a("code",[t._v("u")]),t._v("修饰符。")]),a("li",[a("strong",[t._v("（2）Unicode 字符表示法")]),t._v("：ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上"),a("code",[t._v("u")]),t._v("修饰符，才能识别当中的大括号，否则会被解读为量词。")]),a("li",[a("strong",[t._v("（3）量词")]),t._v("：使用"),a("code",[t._v("u")]),t._v("修饰符后，所有量词都会正确识别码点大于"),a("code",[t._v("0xFFFF")]),t._v("的 Unicode 字符。")]),a("li",[a("strong",[t._v("（4）预定义模式")]),t._v("："),a("code",[t._v("u")]),t._v("修饰符也影响到预定义模式，能否正确识别码点大于"),a("code",[t._v("0xFFFF")]),t._v("的 Unicode 字符。")]),a("li",[a("strong",[t._v("（5）i 修饰符")]),t._v("：有些 Unicode 字符的编码不同，但是字型很相近，比如，"),a("code",[t._v("\\u004B")]),t._v("与"),a("code",[t._v("\\u212A")]),t._v("都是大写的"),a("code",[t._v("K")])]),a("li",[a("strong",[t._v("（6）转义")]),t._v("：没有"),a("code",[t._v("u")]),t._v("修饰符的情况下，正则中没有定义的转义（如逗号的转义"),a("code",[t._v("\\")]),t._v(",）无效，而在"),a("code",[t._v("u")]),t._v("模式会报错。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// \\uD83D\\uDC2A是一个四个字节的 UTF-16 编码，代表一个字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 但是，ES5 不支持四个字节的 UTF-16 编码，会将其识别为两个字符，导致第一行代码结果为true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 加了u修饰符以后，ES6 就会识别其为一个字符，所以第一行代码结果为false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\uD83D"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\uD83D\\uDC2A'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\uD83D"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\uD83D\\uDC2A'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果不添加u修饰符，正则表达式就会认为字符串为两个字符，从而匹配失败。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/^.$/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果不加u修饰符，正则表达式无法识别\\u{61}这种表示法，只会认为这匹配 61 个连续的u。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\u"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("61")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\u"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("61")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\u"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("20")]),t._v("BB7"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'aa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'aa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("𠮷"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'𠮷𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("𠮷"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'𠮷𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\S是预定义模式，匹配所有非空白字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 只有加了u修饰符，它才能正确匹配码点大于0xFFFF的 Unicode 字符。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\"),a("span",{attrs:{class:"token constant"}},[t._v("S")]),t._v("$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\"),a("span",{attrs:{class:"token constant"}},[t._v("S")]),t._v("$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 利用这一点，可以写出一个正确返回字符串长度的函数。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("codePointLength")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/[\\s\\S]/gu")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" result"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'𠮷𠮷'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("codePointLength")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 不加u修饰符，就无法识别非规范的K字符。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\u212A'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("iu"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\u212A'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 没有u修饰符时，逗号前面的反斜杠是无效的，加了u修饰符就报错")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// /\\,/")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("u "),a("span",{attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_4-regexp-prototype-unicode-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-regexp-prototype-unicode-属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. RegExp.prototype.unicode 属性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则实例对象新增"),s("code",[this._v("unicode")]),this._v("属性，表示是否设置了"),s("code",[this._v("u")]),this._v("修饰符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" r1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/hello/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" r2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/hello/u")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unicode "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unicode "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_5-y-修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-y-修饰符","aria-hidden":"true"}},[this._v("#")]),this._v(" 5. y 修饰符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES6 还为正则表达式添加了"),s("code",[this._v("y")]),this._v("修饰符，叫做“粘连”（"),s("code",[this._v("sticky")]),this._v("）修饰符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("y")]),t._v("修饰符的作用与"),a("code",[t._v("g")]),t._v("修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，"),a("code",[t._v("g")]),t._v("修饰符只要剩余位置中存在匹配就可，而"),a("code",[t._v("y")]),t._v("修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 有两个正则表达式，一个使用g修饰符，另一个使用y修饰符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这两个正则表达式各执行了两次")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一次执行的时候，两者行为相同，剩余字符串都是_aa_a。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于g修饰没有位置要求，所以第二次执行会返回结果，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 而y修饰符要求匹配必须从头部开始，所以返回null。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'aaa_aa_a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a+/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a+/y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aaa"]')]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aaa"]')]),t._v("\n\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aa"]')]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果改一下正则表达式，保证每次都能头部匹配，y修饰符就会返回结果了。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 每次匹配，都是从剩余字符串的头部开始。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'aaa_aa_a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a+_/y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aaa_"]')]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aa_"]')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用"),a("code",[t._v("lastIndex")]),t._v("属性，可以更好地说明"),a("code",[t._v("y")]),t._v("修饰符。实际上，"),a("code",[t._v("y")]),t._v("修饰符号隐含了头部匹配的标志"),a("code",[t._v("^")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// lastIndex属性指定每次搜索的开始位置，g修饰符从这个位置开始向后搜索，直到发现匹配为止。")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 指定从2号位置（y）开始匹配")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配成功")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xaya'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在3号位置匹配成功")]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 下一次匹配从4号位开始")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 4号位开始匹配失败")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xaya'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// y修饰符同样遵守lastIndex属性，但是要求必须在lastIndex指定的位置发现匹配。")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 指定从2号位置开始匹配")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 不是粘连，匹配失败")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xaya'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 指定从3号位置开始匹配")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 3号位置是粘连，匹配成功")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xaya'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于不能保证头部匹配，所以返回null")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// y修饰符的设计本意，就是让头部匹配的标志^在全局匹配中都有效。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("b"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("y"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'aba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 字符串对象的replace方法的例子")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 最后一个a因为不是出现在下一次匹配的头部，所以不会被替换。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/gy")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaxa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'-'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// '--xa'")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 单单一个y修饰符对match方法，只能返回第一个匹配，必须与g修饰符联用，才能返回所有匹配。")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'a1a2a3'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a\\d/y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a1"]')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'a1a2a3'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a\\d/gy")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a1", "a2", "a3"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("y")]),this._v("修饰符的一个应用，是从字符串提取 "),s("code",[this._v("token")]),this._v("（词元），"),s("code",[this._v("y")]),this._v("修饰符确保了匹配之间不会有漏掉的字符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 如果字符串里面没有非法字符，y修饰符与g修饰符的提取结果是一样的。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_Y")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/\\s*(\\+|[0-9]+)\\s*/y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_G")]),t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/\\s*(\\+|[0-9]+)\\s*/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("tokenize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_Y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'3 + 4'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// [ '3', '+', '4' ]")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("tokenize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_G")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'3 + 4'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// [ '3', '+', '4' ]")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("tokenize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_REGEX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 但是，一旦出现非法字符，两者的行为就不一样了")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// g修饰符会忽略非法字符，而y修饰符不会，这样就很容易发现错误")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("tokenize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_Y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'3x + 4'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// [ '3' ]")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("tokenize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("TOKEN_G")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'3x + 4'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// [ '3', '+', '4' ]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_6-regexp-prototype-sticky-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-regexp-prototype-sticky-属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 6. RegExp.prototype.sticky 属性")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与"),a("code",[t._v("y")]),t._v("修饰符相匹配，"),a("code",[t._v("ES6")]),t._v(" 的正则实例对象多了"),a("code",[t._v("sticky")]),t._v("属性，表示是否设置了"),a("code",[t._v("y")]),t._v("修饰符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/hello\\d/y")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sticky "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_7-regexp-prototype-flags-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-regexp-prototype-flags-属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 7. RegExp.prototype.flags 属性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES6 为正则表达式新增了"),s("code",[this._v("flags")]),this._v("属性，会返回正则表达式的修饰符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// ES5 的 source 属性")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 返回正则表达式的正文")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("abc"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("ig"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "abc"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ES6 的 flags 属性")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 返回正则表达式的修饰符")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("abc"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("ig"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 'gi'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_8-s-修饰符：dotall-模式-es2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-s-修饰符：dotall-模式-es2018","aria-hidden":"true"}},[this._v("#")]),this._v(" 8. s 修饰符：dotAll 模式 - ES2018")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则表达式中，点（"),s("code",[this._v(".")]),this._v("）是一个特殊字符，代表任意的单个字符，但是有两个例外。一个是四个字节的 "),s("code",[this._v("UTF-16")]),this._v(" 字符，这个可以用"),s("code",[this._v("u")]),this._v("修饰符解决；另一个是行终止符（line terminator character）。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("U+000A")]),t._v(" 换行符（"),a("code",[t._v("\\n")]),t._v("）")]),a("li",[a("code",[t._v("U+000D")]),t._v(" 回车符（"),a("code",[t._v("\\r")]),t._v("）")]),a("li",[a("code",[t._v("U+2028")]),t._v(" 行分隔符（line separator）")]),a("li",[a("code",[t._v("U+2029")]),t._v(" 段分隔符（paragraph separator）")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 因为.不匹配\\n，所以正则表达式返回false。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 但是，很多时候我们希望匹配的是任意单个字符，这时有一种变通的写法。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("bar"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这种解决方案毕竟不太符合直觉，ES2018 引入"),a("code",[t._v("s")]),t._v("修饰符，使得"),a("code",[t._v(".")]),t._v("可以匹配任意单个字符。这被称为"),a("code",[t._v("dotAll")]),t._v("模式，即点（"),a("code",[t._v("dot")]),t._v("）代表一切字符。所以，正则表达式还引入了一个"),a("code",[t._v("dotAll")]),t._v("属性，返回一个布尔值，表示该正则表达式是否处在"),a("code",[t._v("dotAll")]),t._v("模式。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("/s")]),t._v("修饰符和多行修饰符"),a("code",[t._v("/m")]),t._v("不冲突，两者一起使用的情况下，"),a("code",[t._v(".")]),t._v("匹配所有字符，而"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("匹配每一行的行首和行尾。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("foo"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bar"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 另一种写法")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// const re = new RegExp('foo.bar', 's');")]),t._v("\n\nre"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'foo\\nbar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nre"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dotAll "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nre"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{attrs:{class:"token comment"}},[t._v("// 's'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_9-后行断言-es2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-后行断言-es2018","aria-hidden":"true"}},[this._v("#")]),this._v(" 9. 后行断言 - ES2018")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("“"),a("strong",[t._v("先行断言")]),t._v("”指的是，"),a("code",[t._v("x")]),t._v("只有在"),a("code",[t._v("y")]),t._v("前面才匹配，必须写成"),a("code",[t._v("/x(?=y)/")]),t._v("。比如，只匹配百分号之前的数字，要写成"),a("code",[t._v("/\\d+(?=%)/")]),t._v("。“"),a("strong",[t._v("先行否定断言")]),t._v("”指的是，"),a("code",[t._v("x")]),t._v("只有不在"),a("code",[t._v("y")]),t._v("前面才匹配，必须写成"),a("code",[t._v("/x(?!y)/")]),t._v("。比如，只匹配不在百分号之前的数字，要写成"),a("code",[t._v("/\\d+(?!%)/")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("“"),a("strong",[t._v("后行断言")]),t._v("”正好与“先行断言”相反，"),a("code",[t._v("x")]),t._v("只有在"),a("code",[t._v("y")]),t._v("后面才匹配，必须写成"),a("code",[t._v("/(?<=y)x/")]),t._v("。比如，只匹配美元符号之后的数字，要写成"),a("code",[t._v("/(?<=\\$)\\d+/")]),t._v("。“后行否定断言”则与“先行否定断言”相反，"),a("code",[t._v("x")]),t._v("只有不在"),a("code",[t._v("y")]),t._v("后面才匹配，必须写成"),a("code",[t._v("/(?<!y)x/")]),t._v("。比如，只匹配不在美元符号后面的数字，要写成"),a("code",[t._v("/(?<!\\$)\\d+/")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// “先行断言”括号之中的部分（(?=%)），是不计入返回结果的。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token operator"}},[t._v("%")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'100% of US presidents have been male'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v('// ["100"]')]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token operator"}},[t._v("%")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'that’s all 44 of them'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                 "),a("span",{attrs:{class:"token comment"}},[t._v('// ["44"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// “后行断言”的括号之中的部分（(?<=\\$)），也是不计入返回结果。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v("\\$"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Benjamin Franklin is on the $100 bill'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v('// ["100"]')]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("\\$"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'it’s is worth about €90'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                "),a("span",{attrs:{class:"token comment"}},[t._v('// ["90"]')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_DOLLAR_PREFIX")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(?<=\\$)foo/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'$foo %foo foo'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("RE_DOLLAR_PREFIX")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("//// '$bar %foo foo'")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("“后行断言”的实现，需要先匹配"),a("code",[t._v("/(?<=y)x/")]),t._v("的"),a("code",[t._v("x")]),t._v("，然后再回到左边，匹配"),a("code",[t._v("y")]),t._v("的部分。这种“"),a("strong",[t._v("先右后左")]),t._v("”的执行顺序，与所有其他正则操作相反，导致了一些不符合预期的行为。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("首先，后行断言的组匹配，与正常情况下结果是不一样的。")]),s("li",[this._v("其次，“后行断言”的反斜杠引用，也与通常的顺序相反，必须放在对应的那个括号之前。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 需要捕捉两个组匹配")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 没有“后行断言”时，第一个括号是贪婪模式，第二个括号只能捕获一个字符，所以结果是105和3。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 而“后行断言”时，由于执行顺序是从右到左，第二个括号是贪婪模式，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个括号只能捕获一个字符，所以结果是1和053。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1053'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["1053", "105", "3"]')]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1053'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["", "1", "053"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果后行断言的反斜杠引用（\\1）放在括号的后面，就不会得到匹配结果，必须放在前面才可以。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 因为后行断言是先从左到右扫描，发现匹配以后再回过头，从右到左完成反斜杠引用。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("d\\"),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("r"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hodor'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v("\\"),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token function"}},[t._v("d")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("r"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hodor'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v('// ["r", "o"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_10-unicode-属性类-es2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-unicode-属性类-es2018","aria-hidden":"true"}},[this._v("#")]),this._v(" 10. Unicode 属性类 - ES2018")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES2018 引入了一种新的类的写法"),s("code",[this._v("\\p{...}")]),this._v("和"),s("code",[this._v("\\P{...}")]),this._v("，允许正则表达式匹配符合 Unicode 某种属性的所有字符。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意，这两种类只对 Unicode 有效，所以使用的时候一定要加上u修饰符。如果不加"),s("code",[this._v("u")]),this._v("修饰符，正则表达式使用"),s("code",[this._v("\\p")]),this._v("和"),s("code",[this._v("\\P")]),this._v("会报错，ECMAScript 预留了这两个类。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// \\p{Script=Greek}指定匹配一个希腊文字母，所以匹配π成功。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexGreekSymbol "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/\\p{Script=Greek}/u")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregexGreekSymbol"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'π'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Unicode 属性类要指定属性名和属性值。")]),t._v("\n\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("UnicodePropertyName"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("UnicodePropertyValue"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对于某些属性，可以只写属性名，或者只写属性值。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\P{…}是\\p{…}的反向匹配，即匹配不满足条件的字符。")]),t._v("\n\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("UnicodePropertyName"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("UnicodePropertyValue"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 属性类指定匹配所有十进制字符，可以看到各种字型的十进制字符都会匹配成功。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\p{Decimal_Number}+$/u")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'𝟏𝟐𝟑𝟜𝟝𝟞𝟩𝟪𝟫𝟬𝟭𝟮𝟯𝟺𝟻𝟼'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\p{Number}甚至能匹配罗马数字。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配所有数字")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\p{Number}+$/u")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'²³¹¼½¾'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'㉛㉜㉝'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配所有空格")]),t._v("\n\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("White_Space"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配各种文字的所有字母，等同于 Unicode 版的 \\w")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Alphabetic"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Mark"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Decimal_Number"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Connector_Punctuation"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Join_Control"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配各种文字的所有非字母的字符，等同于 Unicode 版的 \\W")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Alphabetic"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Mark"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Decimal_Number"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Connector_Punctuation"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Join_Control"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配 Emoji")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Emoji_Modifier_Base"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Emoji_Modifier"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Emoji_Presentation"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("\\p"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("Emoji"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\\uFE0F"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("gu\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配所有的箭头字符")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regexArrows "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\p{Block=Arrows}+$/u")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregexArrows"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'←↑→↓↔↕↖↗↘↙⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇧⇩'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_11-具名组匹配-es2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-具名组匹配-es2018","aria-hidden":"true"}},[this._v("#")]),this._v(" 11. 具名组匹配 - ES2018")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则表达式使用圆括号进行组匹配。组匹配的一个问题是，每一组的匹配含义不容易看出来，而且只能用数字序号（比如"),s("code",[this._v("matchObj[1]")]),this._v("）引用，要是组的顺序变了，引用的时候就必须修改序号。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 下面正则表达式里面有三组圆括号")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_DATE")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(\\d{4})-(\\d{2})-(\\d{2})/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 使用exec方法，就可以将这三组匹配结果提取出来。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchObj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_DATE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1999-12-31'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" year "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1999")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" month "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" day "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 31")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES2018 引入了"),s("strong",[this._v("具名组匹配")]),this._v("（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("“具名组匹配”在圆括号内部，模式的头部添加“"),a("strong",[t._v("问号 + 尖括号 + 组名")]),t._v("”（"),a("code",[t._v("?<year>")]),t._v("）")]),a("li",[t._v("具名组匹配等于为每一组匹配加上了 "),a("code",[t._v("ID")]),t._v("，便于描述匹配的目的。")]),a("li",[t._v("如果组的顺序变了，也不用改变匹配后的处理代码。")]),a("li",[t._v("如果具名组没有匹配，那么对应的"),a("code",[t._v("groups")]),t._v("对象属性会是"),a("code",[t._v("undefined")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 在exec方法返回结果的groups属性上引用该组名")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 同时，数字序号（matchObj[1]）依然有效。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_DATE")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchObj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_DATE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1999-12-31'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" year "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("year"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "1999"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" month "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("month"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "12"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" day "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("day"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "31"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 具名组as没有找到匹配，那么matchObj.groups.as属性值就是undefined，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 并且as这个键名在groups是始终存在的。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_OPT_A")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^(?<as>a+)?$/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchObj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_OPT_A")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmatchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'as'")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" matchObj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_12-具名组匹配-解构赋值和替换-es2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-具名组匹配-解构赋值和替换-es2018","aria-hidden":"true"}},[this._v("#")]),this._v(" 12. 具名组匹配 - 解构赋值和替换 - ES2018")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("字符串替换时，使用"),s("code",[this._v("$<组名>")]),this._v("引用具名组。")]),s("li",[this._v("具名组匹配在原来的基础上，新增了最后一个函数参数：具名组构成的一个对象。函数内部可以直接对这个对象进行解构赋值。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^(?<one>.*):(?<two>.*)$/u")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" group"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("one"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" two"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'foo:bar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["foo:bar", "foo", "bar", index: 0, input: "foo:bar", groups: {one: "foo"')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// two: "bar"}, length: 3]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// replace方法的第二个参数是一个字符串，而不是正则表达式")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/u")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'2015-01-02'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$<day>/$<month>/$<year>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// '02/01/2015'")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// replace方法的第二个参数也可以是函数，该函数的参数序列如下")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'2015-01-02'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n   matched"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 整个匹配结果 2015-01-02")]),t._v("\n   capture1"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个组匹配 2015")]),t._v("\n   capture2"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个组匹配 01")]),t._v("\n   capture3"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 第三个组匹配 02")]),t._v("\n   position"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配开始的位置 0")]),t._v("\n   "),a("span",{attrs:{class:"token constant"}},[t._v("S")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 原字符串 2015-01-02")]),t._v("\n   groups "),a("span",{attrs:{class:"token comment"}},[t._v("// 具名组构成的一个对象 {year, month, day}")]),t._v("\n "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("day"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" month"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" year"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" groups"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("day"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("/")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("month"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("/")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("year"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_13-具名组匹配的引用-es2018"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-具名组匹配的引用-es2018","aria-hidden":"true"}},[this._v("#")]),this._v(" 13. 具名组匹配的引用 - ES2018")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果要在正则表达式内部引用某个“具名组匹配”，可以使用"),s("code",[this._v("\\k<组名>")]),this._v("的写法。数字引用（"),s("code",[this._v("\\1")]),this._v("）依然有效。这两种引用语法还可以同时使用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^(?<word>[a-z]+)!\\k<word>$/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc!abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc!ab'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^(?<word>[a-z]+)!\\1$/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc!abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc!ab'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^(?<word>[a-z]+)!\\k<word>!\\1$/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc!abc!abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token constant"}},[t._v("RE_TWICE")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc!abc!ab'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_14-正则匹配索引-indices"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-正则匹配索引-indices","aria-hidden":"true"}},[this._v("#")]),this._v(" 14. 正则匹配索引 indices")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则匹配结果的开始位置和结束位置，目前获取并不是很方便。正则实例的"),s("code",[this._v("exec()")]),this._v("方法，返回结果有一个"),s("code",[this._v("index")]),this._v("属性，可以获取整个匹配结果的开始位置，但是如果包含组匹配，每个组匹配的开始位置，很难拿到。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在有一个"),a("strong",[t._v("第三阶段提案")]),t._v("，为"),a("code",[t._v("exec()")]),t._v("方法的返回结果加上"),a("code",[t._v("indices")]),t._v("属性，"),a("strong",[t._v("在这个属性上面可以拿到匹配的开始位置和结束位置")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("如果正则表达式包含"),a("strong",[t._v("组匹配")]),t._v("，那么"),a("code",[t._v("indices")]),t._v("属性对应的数组就会包含多个成员，提供每个组匹配的开始位置和结束位置。")]),a("li",[t._v("如果正则表达式包含"),a("strong",[t._v("具名组匹配")]),t._v("，"),a("code",[t._v("indices")]),t._v("属性数组还会有一个"),a("code",[t._v("groups")]),t._v("属性。该属性是一个对象，可以从该对象获取具名组匹配的开始位置和结束位置。")]),a("li",[t._v("如果获取组匹配不成功，"),a("code",[t._v("indices")]),t._v("属性数组的对应成员则为"),a("code",[t._v("undefined")]),t._v("，"),a("code",[t._v("indices.groups")]),t._v("属性对象的对应成员也是"),a("code",[t._v("undefined")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意，开始位置包含在匹配结果之中，但是"),a("strong",[t._v("结束位置不包含在匹配结果之中")]),t._v("。比如，匹配结果为"),a("code",[t._v("ab")]),t._v("，分别是原始字符串的第"),a("code",[t._v("1")]),t._v("位和第"),a("code",[t._v("2")]),t._v("位，那么结束位置就是第"),a("code",[t._v("3")]),t._v("位。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// exec()方法的返回结果result，它的index属性是整个匹配结果（ab）的开始位置，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 而它的indices属性是一个数组，成员是每个匹配的开始位置和结束位置的数组。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于该例子的正则表达式没有组匹配，所以indices数组只有一个成员，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 表示整个匹配的开始位置是1，结束位置是3。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/ab/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices "),a("span",{attrs:{class:"token comment"}},[t._v("// [ [1, 3] ]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式包含一个组匹配，那么indices属性数组就有两个成员")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个成员是整个匹配结果（abbcd）的开始位置和结束位置，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个成员是组匹配（cd）的开始位置和结束位置。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/ab+(cd)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices "),a("span",{attrs:{class:"token comment"}},[t._v("// [ [ 1, 6 ], [ 4, 6 ] ]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 下面是多个组匹配的例子。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式包含两个组匹配，所以indices属性数组就有三个成员。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/ab+(cd(ef))/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices "),a("span",{attrs:{class:"token comment"}},[t._v("// [ [1, 8], [4, 8], [6, 8] ]")]),t._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于组匹配不成功，所以indices属性数组和indices.groups属性对象对应的组匹配成员都是undefined")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'zabbcdef'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/ab+(?<Z>ce)?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" re"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nresult"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("indices"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'Z'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_15-string-prototype-matchall-es2020"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-string-prototype-matchall-es2020","aria-hidden":"true"}},[this._v("#")]),this._v(" 15. String.prototype.matchAll() - ES2020")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果一个正则表达式在字符串里面有多个匹配，现在一般使用"),s("code",[this._v("g")]),this._v("修饰符或"),s("code",[this._v("y")]),this._v("修饰符，在循环里面逐一取出。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/t(e)(st(\\d?))/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'test1test2test3'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" matches "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// while循环取出每一轮的正则匹配，一共三轮")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" regex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  matches"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nmatches \n"),a("span",{attrs:{class:"token comment"}},[t._v("// [")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('//   ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"],')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('//   ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"],')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('//   ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ]")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES2020 增加了"),s("code",[this._v("String.prototype.matchAll()")]),this._v("方法，"),s("strong",[this._v("可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组，可以用for...of循环取出。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 由于string.matchAll(regex)返回的是遍历器，所以可以用for...of循环取出")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'test1test2test3'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/t(e)(st(\\d?))/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{attrs:{class:"token keyword"}},[t._v("of")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_16-遍历器转为数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-遍历器转为数组","aria-hidden":"true"}},[this._v("#")]),this._v(" 16. 遍历器转为数组")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("遍历器转为数组是非常简单的，使用"),s("code",[this._v("...")]),this._v("运算符和"),s("code",[this._v("Array.from()")]),this._v("方法就可以了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 转为数组的方法一")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 转为数组的方法二")]),t._v("\nArray"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("matchAll")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("regex"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);