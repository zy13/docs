(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{334:function(e,t,a){"use strict";a.r(t);var s=a(0),n=Object(s.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5a79adeef265da4e93116430",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel详解-挺全"),a("OutboundLink")],1)]),e._m(1),e._m(2),e._m(3),e._m(4),e._m(5),e._m(6),e._m(7),e._m(8),e._m(9),e._m(10),e._m(11),e._m(12),e._m(13),e._m(14)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel","aria-hidden":"true"}},[this._v("#")]),t("a",{attrs:{href:"!https://babeljs.io/docs/en"}},[this._v("babel")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("babel是下一代JavaScript的语法编译器，它主要用于将ES2015+代码转化为浏览器可以识别的JavaScript，babel的主要工作：\n* 转换语法\n* 提供目标环境中缺少的polyfill特性（通过@babel/polyfill）\n* 源码转换\n* 等等\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Presets")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('- Presets是共享的.babel配置或者只是babel插件的一个数组\n- 使用的时候需要安装对用的插件, 比如：\n{\n  "presets": ["es2015"]\n}\n需要安装babel-preset-es2015\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("Statge-X(stage-0/1/2/3/4)")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("它是按照JavaScript的提案阶段区分的，一共有5个阶段，数字越小，阶段越往后靠，存在依赖关系，也就是说stage-0包括stage-1的，以此类推\nBabel将运行的代码分为三个阶段：解析(1)、转换(2)，以及生成(3)。可以为babel添加一些插件让其去做任何事情（插件会影响Babel的第二阶段，即转换）\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v(".babelrc")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('* babel配置文件，主要是对预设(presets)和插件(plugins)进行配置\n* 不同的转译器作用不同的配置项，主要分为：\n1、语法转译器：对ES最新语法糖进行转译，并不负责转译js新增的api和全局对象。babel-preset-env\n2、补丁转译器：babel-plugin-transform-runtime\n3、jsx和flow转译器：babel-preset-react\n\n由于配置的插件从维护到书写都极为麻烦，后来官方统一推荐使用env，代替那些单一的插件功能\n* babel-plugin-transform-runtime、babel-plugin-syntax-dynamic-import可以代替单一的插件功能\n{\n  "plugins": [\n    "syntax-dynamic-import",["transform-runtime"]\n  ]\n}\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("@babel/plugin-transform-runtime")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("只对es6语法进行转换，如let/const等，而不对新的api进行转换，如include/Object.assign。如果需要转换api，需要通过使用babel-polyfill来规避兼容性问题\n将babel辅助器函数搬到一个单独的模块babel-runtime中，这样能减少项目文件的大小\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("@babel/plugin-syntax-dynamic-import")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("动态模块引入，如果配置了stage-2, 可以不用改插件，同样支持动态模块的引入\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("env")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("需要支持的环境\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("基于react解析的babel解析器")])])}],!1,null,null,null);t.default=n.exports}}]);