(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{378:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[a("a",{attrs:{href:"https://www.wangdoc.com/javascript/stdlib/regexp.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("RegExp 对象"),a("OutboundLink")],1)]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),a("p",[t._v("正则表达式中那些有特殊含义的元字符，如果要匹配它们本身，就需要在它们前面要加上反斜杠。")]),t._m(44),t._m(45),a("p",[t._v("正则表达式对一些不能打印的特殊字符，提供了表达方法：")]),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),t._m(62),a("p",[t._v("量词符用来设定某个模式出现的次数：")]),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),t._m(81),t._m(82),t._m(83),t._m(84),t._m(85),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_1、概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、概述")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则表达式（"),s("code",[this._v("regular expression")]),this._v("）是一种表达文本模式（即字符串结构）的方法，有点像字符串的模板，常常用来按照“给定模式”匹配文本。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 新建正则表达式一 - 使用字面量")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 以斜杠表示开始和结束，便利和直观，实际应用中，基本上都采用字面量定义正则表达式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在引擎编译代码时，就会新建正则表达式，效率较高")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 新建正则表达式二 - 使用RegExp构造函数")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在运行时新建正则表达式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 还可以接受第二个参数，表示修饰符")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xyz'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'xyz'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/xyz/i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 上面两种写法是等价的，都新建了一个内容为xyz的正则表达式对象")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_2、实例属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、实例属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、实例属性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("与修饰符相关")]),this._v("，用于了解设置了什么修饰符：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("RegExp.prototype.ignoreCase")]),t._v("：返回一个布尔值，表示是否设置了"),a("code",[t._v("i")]),t._v("修饰符。")]),a("li",[a("code",[t._v("RegExp.prototype.global")]),t._v("：返回一个布尔值，表示是否设置了"),a("code",[t._v("g")]),t._v("修饰符。")]),a("li",[a("code",[t._v("RegExp.prototype.multiline")]),t._v("：返回一个布尔值，表示是否设置了"),a("code",[t._v("m")]),t._v("修饰符。")]),a("li",[a("code",[t._v("RegExp.prototype.flags")]),t._v("：返回一个字符串，包含了已经设置的所有修饰符，按字母排序。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("与修饰符无关")]),this._v("的属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("RegExp.prototype.lastIndex")]),t._v("：返回一个整数，表示下一次开始搜索的位置。该属性可读写，设置了"),a("code",[t._v("g")]),t._v("修饰符的时候，只要手动设置了"),a("code",[t._v("lastIndex")]),t._v("的值，就会从指定位置开始匹配。")]),a("li",[a("code",[t._v("RegExp.prototype.source")]),t._v("：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 与修饰符相关")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 四个属性都是只读的")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/abc/igm")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ignoreCase "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("global "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("multiline "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flags "),a("span",{attrs:{class:"token comment"}},[t._v("// 'gim'")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 与修饰符无关")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 0  - 可读")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source "),a("span",{attrs:{class:"token comment"}},[t._v('// "abc" - 只读')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_3、regexp-prototype-test"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、regexp-prototype-test","aria-hidden":"true"}},[this._v("#")]),this._v(" 3、RegExp.prototype.test()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则实例对象的"),s("code",[this._v("test")]),this._v("方法返回一个布尔值，表示当前模式是否能匹配参数字符串。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("如果正则表达式带有"),a("code",[t._v("g")]),t._v("修饰符，则每一次"),a("code",[t._v("test")]),t._v("方法都从上一次结束的位置开始向后匹配。")]),a("li",[t._v("带有"),a("code",[t._v("g")]),t._v("修饰符时，可以通过正则对象的"),a("code",[t._v("lastIndex")]),t._v("属性指定开始搜索的位置。")]),a("li",[t._v("带有"),a("code",[t._v("g")]),t._v("修饰符时，正则表达式内部会记住上一次的"),a("code",[t._v("lastIndex")]),t._v("属性，这时不应该更换所要匹配的字符串，否则会有一些难以察觉的错误。")]),a("li",[a("code",[t._v("lastIndex")]),t._v("属性只对同一个正则表达式有效。")]),a("li",[t._v("如果正则模式是一个空字符串，则匹配所有字符串。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 返回一个布尔值")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 当前模式是否能匹配参数字符串")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 验证参数字符串之中是否包含cat，结果返回true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("cat"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'cats and dogs'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式使用了g修饰符，表示是全局搜索，会有多个结果")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 三次使用test方法，每一次开始搜索的位置都是上一次匹配的后一个位置")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/x/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 指定从字符串的第五个位置开始搜索，这个位置为空，所以返回false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// lastIndex属性重置为0，所以第二次执行r.test(s)会返回true。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/x/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式r是从上一次的lastIndex位置开始匹配")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 导致第二次执行test方法时出现预期以外的结果")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这时不应该更换所要匹配的字符串，否则会有一些难以察觉的错误。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/bb/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'bb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'-bb-'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 代码会导致无限循环")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 因为while循环的每次匹配条件都是一个新的正则表达式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 导致lastIndex属性总是等于0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'babaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" count"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果正则模式是一个空字符串，则匹配所有字符串。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_4、regexp-prototype-exec"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、regexp-prototype-exec","aria-hidden":"true"}},[this._v("#")]),this._v(" 4、RegExp.prototype.exec()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则实例对象的"),s("code",[this._v("exec()")]),this._v("方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回"),s("code",[this._v("null")]),this._v("。"),s("code",[this._v("exec()")]),this._v("方法的返回数组还包含以下两个属性。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("index")]),t._v("属性：模式匹配成功的开始位置（从"),a("code",[t._v("0")]),t._v("开始计数）。")]),a("li",[a("code",[t._v("input")]),t._v("属性：整个原字符串。")]),a("li",[t._v("如果"),a("strong",[t._v("正则表示式包含圆括号")]),t._v("（即含有“组匹配”），则返回的数组会包括多个成员。")]),a("li",[t._v("如果正则表达式加上"),a("code",[t._v("g")]),t._v("修饰符，则可以使用多次"),a("code",[t._v("exec()")]),t._v("方法，下一次搜索的位置从上一次匹配成功结束的位置开始。")]),a("li",[t._v("利用"),a("code",[t._v("g")]),t._v("修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 返回匹配结果，一个数组或者null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则对象r1匹配成功，返回一个数组，成员是匹配结果；")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则对象r2匹配失败，返回null。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/x/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/y/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["x", index: 1, input: "_x_x", groups: undefined]')]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个成员是整个匹配的结果，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个成员是圆括号匹配的结果。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(x)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/_(x)/")]),t._v("\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["x", "x", index: 1, input: "_x_x", groups: undefined]')]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["_x", "x", index: 0, input: "_x_x", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// index属性等于1，是因为从原字符串的第二个位置开始匹配成功")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a(b+)a/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_abbba_aba_'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" r"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\narr "),a("span",{attrs:{class:"token comment"}},[t._v('// ["abbba", "bbb", index: 1, input: "_abbba_aba_", groups: undefined]')]),t._v("\narr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\narr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("input "),a("span",{attrs:{class:"token comment"}},[t._v('// "_abbba_aba_"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式加上g修饰符, 连续用了四次exec()方法")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 前三次都是从上一次匹配结束的位置向后匹配")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 当第三次匹配结束以后，整个字符串已经到达尾部，匹配结果返回null，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则实例对象的lastIndex属性也重置为0，意味着第四次匹配将从头开始。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abc_abc_abc'")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr1 "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", index: 0, input: "abc_abc_abc", groups: undefined]')]),t._v("\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\nreg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr2 "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", index: 4, input: "abc_abc_abc", groups: undefined]')]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\nreg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r3 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr3 "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", index: 8, input: "abc_abc_abc", groups: undefined]')]),t._v("\nr3"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\nreg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 9")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r4 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr4 "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\nreg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 利用g修饰符允许多次匹配的特点，可以用一个循环完成全部匹配。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 只要exec()方法不返回null，就会一直循环下去，每次输出匹配的位置和匹配的文本。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abc_abc_abc'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'#'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("':'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// #0:a")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// #4:a")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// #8:a")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_5、字符串实例方法-正则表达式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、字符串实例方法-正则表达式","aria-hidden":"true"}},[this._v("#")]),this._v(" 5、字符串实例方法 - 正则表达式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）string-prototype-match"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）string-prototype-match","aria-hidden":"true"}},[this._v("#")]),this._v(" （1）String.prototype.match()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("字符串实例对象的"),s("code",[this._v("match")]),this._v("方法用于"),s("strong",[this._v("确定原字符串是否匹配某个子字符串，返回一个数组，成员为匹配的第一个字符串")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 字符串的match方法与正则对象的exec方法非常类似：")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配成功返回一个数组，匹配失败返回null。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/x/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/y/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r1"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["x", index: 1, input: "_x_x", groups: undefined]')]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\nr1"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["x", index: 1, input: "_x_x", groups: undefined]')]),t._v("\nr2"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果正则表达式带有g修饰符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 则该方法与正则对象的exec方法行为不同")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// exec会一次性返回所有匹配成功的结果")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 并且返回的数组没有index和input属性")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", "a"]')]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", index: 0, input: "abba", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 设置正则表达式的lastIndex属性，对match方法无效")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配总是从字符串的第一个字符开始")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 设置正则对象的lastIndex属性是无效的")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/a|b/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("7")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'xaxb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// ['a', 'b']")]),t._v("\nr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastIndex "),a("span",{attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）string-prototype-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）string-prototype-search","aria-hidden":"true"}},[this._v("#")]),this._v(" （2）String.prototype.search()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("字符串对象的"),s("code",[this._v("search")]),this._v("方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回"),s("code",[this._v("-1")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第一个匹配结果出现在字符串的1号位置")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("search")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'_x_x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("search")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/x/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（3）string-prototype-replace"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（3）string-prototype-replace","aria-hidden":"true"}},[this._v("#")]),this._v(" （3）String.prototype.replace()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("replace")]),this._v("方法用于替换匹配的子字符串，一般情况下只替换第一个匹配（除非使用带有"),s("code",[this._v("g")]),this._v("修饰符的正则表达式）。返回替换后的字符串。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第一个参数为被替换的字符串")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个参数为替换的内容")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 返回替换后的字符串")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果被替换的字符串找不到，返回原字符串")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "baa"')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'c'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "aaa"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 使用正则表达式作为参数")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个是正则表达式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个是替换的内容")]),t._v("\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("search"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" replacement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果不加g修饰符，就替换第一个匹配成功的值")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "baa"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果加g修饰符，替换所有匹配成功的值。")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "bbb"')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// replace方法消除字符串首尾两端的空格。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'  #id div.class  '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/^\\s+|\\s+$/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "#id div.class"')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于使用trim方法")]),t._v("\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "#id div.class"')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("replace")]),t._v("方法的"),a("strong",[t._v("第二个参数")]),t._v("可以使用美元符号"),a("code",[t._v("$")]),t._v("，用来"),a("strong",[t._v("指代所替换的内容")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("$&")]),t._v("：匹配的子字符串。")]),a("li",[t._v("$` ：匹配结果前面的文本。")]),a("li",[a("code",[t._v("$'")]),t._v("：匹配结果后面的文本。")]),a("li",[a("code",[t._v("$n")]),t._v("：匹配成功的第"),a("code",[t._v("n")]),t._v("组内容，"),a("code",[t._v("n")]),t._v("是从"),a("code",[t._v("1")]),t._v("开始的自然数。")]),a("li",[a("code",[t._v("$$")]),t._v("：指代美元符号"),a("code",[t._v("$")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第二个参数，使用$符号指代替换的内容")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/(\\w+)\\s(\\w+)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$2 $1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "world hello"')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'[$`-$&-$\\']'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "a[a-b-c]c" ')]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("replace")]),t._v("方法的"),a("strong",[t._v("第二个参数")]),t._v("还可以是一个"),a("strong",[t._v("函数")]),t._v("，"),a("strong",[t._v("将每一个匹配内容替换为函数返回值")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第二个参数是函数")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'3 and 5'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/[0-9]+/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "6 and 10"')]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'The quick brown fox jumped over the lazy dog.'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pattern "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/quick|brown|lazy/ig")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pattern"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("replacer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "The QUICK BROWN fox jumped over the LAZY dog."')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 替换的函数，可以接受多个参数")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个参数是捕捉到的内容")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个参数是捕捉到的组匹配（有多少个组匹配，就有多少个对应的参数）")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" prices "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'p1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$1.99'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'p2'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$9.99'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'p3'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$5.00'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" template "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<span id=\"p1\"></span>'")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<span id=\"p2\"></span>'")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<span id=\"p3\"></span>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配函数的作用是将价格插入模板中")]),t._v("\ntemplate"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{attrs:{class:"token regex"}},[t._v('/(<span id=")(.*?)(">)(<\\/span>)/g')]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" prices"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$"),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" $"),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// "<span id="p1">$1.99</span><span id="p2">$9.99</span><span id="p3">$5.00</span>"')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（4）string-prototype-split"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（4）string-prototype-split","aria-hidden":"true"}},[this._v("#")]),this._v(" （4）String.prototype.split()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("split")]),this._v("方法按照给定规则分割字符串，返回一个由分割出来的子字符串组成的数组。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 返回一个数组")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个参数是分割的字符或者正则表达式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个参数是返回数组的最大成员数")]),t._v("\nstr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("separator"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("limit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 非正则分隔")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'a,  b,c, d'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("','")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", "  b", "c", " d"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则分隔，去除多余的空格")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'a,  b,c, d'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/, */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", "b", "c", "d"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 指定返回数组的最大成员数")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'a,  b,c, d'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/, */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", "b"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 分割规则是0次或多次的a，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个分隔符是aaa，第二个分割符是a，将字符串分成三个部分，包含开始处的空字符串")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa*a*'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["", "*", "*"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个分隔符是aaa，第二个分隔符是0个a（即空字符），第三个分隔符是a")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 将字符串分成四个部分。")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa**a*'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["", "*", "*", "*"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果正则表达式带有括号，则括号匹配的部分也会作为数组成员返回。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式使用了括号，第一个组匹配是aaa，第二个组匹配是a，它们都作为数组成员返回。")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'aaa*a*'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/(a*)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["", "aaa", "*", "a", "*"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_6、字面量字符和元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、字面量字符和元字符","aria-hidden":"true"}},[this._v("#")]),this._v(" 6、字面量字符和元字符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"字面量字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字面量字符","aria-hidden":"true"}},[this._v("#")]),this._v(" 字面量字符")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大部分字符在正则表达式中，就是字面的含义，比如"),a("code",[t._v("/a/")]),t._v("匹配"),a("code",[t._v("a")]),t._v("，"),a("code",[t._v("/b/")]),t._v("匹配"),a("code",[t._v("b")]),t._v("。如果在正则表达式之中，某个字符只表示它字面的含义（就像前面的"),a("code",[t._v("a")]),t._v("和"),a("code",[t._v("b")]),t._v("），那么它们就叫做“"),a("strong",[t._v("字面量字符")]),t._v("”（"),a("code",[t._v("literal characters")]),t._v("）")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式的dog，就是字面量字符")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("dog"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'old dog'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"元字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#元字符","aria-hidden":"true"}},[this._v("#")]),this._v(" 元字符")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("有一部分字符有特殊含义，不代表字面的意思，叫做“"),s("strong",[this._v("元字符")]),this._v("”（"),s("code",[this._v("metacharacters")]),this._v("）：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("点字符 "),a("code",[t._v(".")]),t._v("：匹配所有字符（除了回车"),a("code",[t._v("\\r")]),t._v("、换行"),a("code",[t._v("\\n")]),t._v("、行分隔符"),a("code",[t._v("\\u2028")]),t._v("、段分隔符"),a("code",[t._v("\\u2029")]),t._v("）")]),a("li",[t._v("位置字符 "),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("：前者表示字符串的开始位置，后者表示字符串的结束位置")]),a("li",[t._v("选择符"),a("code",[t._v("|")]),t._v("：在正则表达式中表示“或关系”")]),a("li",[t._v("其它："),a("code",[t._v("\\")]),t._v("、"),a("code",[t._v("*")]),t._v("、"),a("code",[t._v("+")]),t._v("、"),a("code",[t._v("?")]),t._v("、"),a("code",[t._v("()")]),t._v("、"),a("code",[t._v("[]")]),t._v("、"),a("code",[t._v("{}")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 点字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 代表一个字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对于码点大于0xFFFF字符，点字符不能正确匹配，会认为这是两个字符")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// c.t匹配c和t之间包含任意一个字符的情况，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 只要这三个字符在同一行，比如cat、c2t、c-t等等，但是不匹配coot")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'cat'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("c"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'coot'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 位置字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// test必须出现在开始位置")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("test"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test123'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// test必须出现在结束位置")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("test$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'new test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 从开始位置到结束位置只有test")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("test$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("test$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 选择符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式指定必须匹配11或22")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 多个选择符可以联合使用")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token number"}},[t._v("11")]),a("span",{attrs:{class:"token operator"}},[t._v("|")]),a("span",{attrs:{class:"token number"}},[t._v("22")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'911'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 多个选择符可以联合使用")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("fred"),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("barney"),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("betty"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'barney'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 选择符会包括它前后的多个字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 比如/ab|cd/指的是匹配ab或者cd")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// a和b之间有一个空格或者一个制表符")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token function"}},[t._v("a")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v("\\t"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("b"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a\\tb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_7、转义符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、转义符","aria-hidden":"true"}},[this._v("#")]),this._v(" 7、转义符 \\")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 要匹配+，就要写成\\+")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个正则表达式之所以不匹配，因为加号是元字符，不代表自身")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个正则表达式使用反斜杠对加号转义，就能匹配成功")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\\"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 一共有`12`个字符需要反斜杠转义：")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("$")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \\\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果使用RegExp方法生成正则对象，转义需要使用两个斜杠，因为字符串内部会先转义一次。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 下面RegExp作为构造函数，参数是一个字符串")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 但是，在字符串内部，反斜杠也是转义字符，所以它会先被反斜杠转义一次，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 然后再被正则表达式转义一次，因此需要两个反斜杠转义")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1\\+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1\\\\+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'1+1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_8、特殊字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8、特殊字符","aria-hidden":"true"}},[this._v("#")]),this._v(" 8、特殊字符")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\cX`")])]),t._v("   表示"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Ctrl-[X]`")])]),t._v("，其中的"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`X`")])]),t._v("是"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`A-Z`")])]),t._v("之中任一个英文字母，用来匹配控制字符。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[\\b]`")])]),t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("匹配退格键")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`U+0008`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，不要与"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\b`")])]),t._v("混淆。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\n`")])]),t._v("    匹配换行键。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\r`")])]),t._v("    匹配回车键。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\t`")])]),t._v("    匹配制表符 "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`tab`")])]),t._v("（"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`U+0009`")])]),t._v("）。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\v`")])]),t._v("    匹配垂直制表符（"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`U+000B`")])]),t._v("）。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\f`")])]),t._v("    匹配换页符（"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`U+000C`")])]),t._v("）。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\0`")])]),t._v("    匹配"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`null`")])]),t._v("字符（"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`U+0000`")])]),t._v("）。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\xhh`")])]),t._v("  匹配一个以两位十六进制数（"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\x00-\\xFF`")])]),t._v("）表示的字符。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\uhhhh`")])]),t._v("匹配一个以四位十六进制数（"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\u0000-\\uFFFF`")])]),t._v("）表示的 "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Unicode`")])]),t._v(" 字符。\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_9、字符类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、字符类","aria-hidden":"true"}},[this._v("#")]),this._v(" 9、字符类")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("字符类（"),s("code",[this._v("class")]),this._v("）表示有一系列字符可供选择，只要匹配其中一个就可以了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// [abc]表示a、b、c之中任选一个匹配。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 字符串hello world不包含a、b、c这三个字母中的任一个，所以返回false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 符串apple包含字母a，所以返回true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'apple'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_9、字符类-脱字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9、字符类-脱字符","aria-hidden":"true"}},[this._v("#")]),this._v(" 9、字符类 - 脱字符 ^")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果方括号内的第一个字符是"),s("code",[this._v("[^]")]),this._v("，则表示"),s("strong",[this._v("除了字符类之中的字符，其他字符都可以匹配")]),this._v("。脱字符只有在字符类的第一个位置才有特殊含义，否则就是字面含义")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// [^abc]表示除了a、b、c之外都可以匹配")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 字符串bbc news包含a、b、c以外的其他字符，所以返回true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 字符串bbc不包含a、b、c以外的其他字符，所以返回false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'bbc news'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("abc"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'bbc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// [^] 表示匹配一切字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相比之下，点号作为元字符（.）是不包括换行符的")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 字符串s含有一个换行符，点号不包括换行符，所以第一个正则表达式匹配失败")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个正则表达式[^]包含一切字符，所以匹配成功")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Please yes\\nmake my day!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/yes.*day/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// null")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/yes[^]*day/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["yes↵make my day", index: 7, input: "Please yes↵make my day!", groups: undefined]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_10、字符类-连字符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10、字符类-连字符","aria-hidden":"true"}},[this._v("#")]),this._v(" 10、字符类 - 连字符 -")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("某些情况下，对于连续序列的字符，连字符（"),s("code",[this._v("-")]),this._v("）用来提供简写形式，表示字符的连续范围。当连字号（dash）不出现在方括号之中，就不具备简写的作用，只代表字面的含义。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// [abc]可以写成[a-c]，[0123456789]可以写成[0-9]，同理[A-Z]表示26个大写字母")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 只有当连字号用在方括号之中，才表示连续的字符序列。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 合法的字符类简写形式")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("9.")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("9")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("fA"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token constant"}},[t._v("F")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("zA"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token constant"}},[t._v("Z0")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("9")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("31")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 字符类[1-31]，不代表1到31，只代表1到3。")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 连字符还可以用来指定 Unicode 字符的范围")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\u0128-\\uFFFF表示匹配码点在0128到FFFF之间的所有字符。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"\\u0130\\u0131\\u0132"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/[\\u0128-\\uFFFF]/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 不要过分使用连字符，设定一个很大的范围，否则很可能选中意料之外的字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// [A-z]表面上它是选中从大写的A到小写的z之间52个字母")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 但是由于在 ASCII 编码之中，大写字母与小写字母之间还有其他字符，结果就会出现意料之外的结果")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 由于反斜杠（'\\'）的ASCII码在大写字母与小写字母之间，结果会被选中。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token constant"}},[t._v("A")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("z"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\\\\'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_11、预定义模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11、预定义模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 11、预定义模式")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 预定义模式指的是某些常见模式的简写方式。")]),t._v("\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\d`")])]),t._v(" 匹配"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`0-9`")])]),t._v("之间的任一数字，相当于"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[0-9]`")])]),t._v("。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\D`")])]),t._v(" 匹配所有"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`0-9`")])]),t._v("以外的字符，相当于"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[^0-9]`")])]),t._v("。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\w`")])]),t._v(" 匹配任意的字母、数字和下划线，相当于"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[A-Za-z0-9_]`")])]),t._v("。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\W`")])]),t._v(" 除所有字母、数字和下划线以外的字符，相当于"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[^A-Za-z0-9_]`")])]),t._v("。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\s`")])]),t._v(" 匹配空格（包括换行符、制表符、空格符等），相等于"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[ \\t\\r\\n\\v\\f]`")])]),t._v("。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\S`")])]),t._v(" 匹配非空格的字符，相当于"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`[^ \\t\\r\\n\\v\\f]`")])]),t._v("。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\b`")])]),t._v(" 匹配词的边界。\n"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`\\B`")])]),t._v(" 匹配非词边界，即在词的内部。\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\s 空格")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\w 字母|数字|下划线")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\s\\w"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// [" world", index: 5, input: "hello world", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\b 词的边界，所以world的词首必须独立，词尾是否独立未指定")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello-world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'helloworld'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\B 非词的边界，world的词首不独立")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\Bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello-world'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\Bworld"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'helloworld'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// [\\S\\s] 一切字符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// [^] 一切字符")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"<b>Hello</b>\\n<i>world!</i>"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token regex"}},[t._v("/.*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "<b>Hello</b>"')]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\\"),a("span",{attrs:{class:"token constant"}},[t._v("S")]),t._v("\\s"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "<b>Hello</b>\\n<i>world!</i>"')]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "<b>Hello</b>\\n<i>world!</i>"')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_12、重复类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12、重复类","aria-hidden":"true"}},[this._v("#")]),this._v(" 12、重复类 {}")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("模式的精确匹配次数，使用大括号（"),s("code",[this._v("{}")]),this._v("）表示。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("{n}")]),t._v("表示恰好重复"),a("code",[t._v("n")]),t._v("次")]),a("li",[a("code",[t._v("{n,}")]),t._v("表示至少重复"),a("code",[t._v("n")]),t._v("次")]),a("li",[a("code",[t._v("{n,m}")]),t._v("表示重复不少于"),a("code",[t._v("n")]),t._v("次，不多于"),a("code",[t._v("m")]),t._v("次")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第一个模式指定o连续出现2次")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个模式指定o连续出现2次到5次之间")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("lo"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("k"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'look'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("lo"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("k"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'looook'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_13、量词符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13、量词符","aria-hidden":"true"}},[this._v("#")]),this._v(" 13、量词符")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("?")]),t._v(" 问号表示某个模式出现"),a("code",[t._v("0")]),t._v("次或"),a("code",[t._v("1")]),t._v("次，等同于"),a("code",[t._v("{0, 1}")]),t._v("。")]),a("li",[a("code",[t._v("*")]),t._v(" 星号表示某个模式出现"),a("code",[t._v("0")]),t._v("次或多次，等同于"),a("code",[t._v("{0,}")]),t._v("。")]),a("li",[a("code",[t._v("+")]),t._v(" 加号表示某个模式出现"),a("code",[t._v("1")]),t._v("次或多次，等同于"),a("code",[t._v("{1,}")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// t 出现0次或1次")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'est'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// t 出现1次或多次")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ttest'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'est'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// t 出现0次或多次")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'test'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ttest'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'tttest'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("t"),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("est"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'est'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_14、贪婪模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14、贪婪模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 14、贪婪模式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("三个量词符，默认情况下都是最大可能匹配，即匹配到下一个字符不满足匹配规则为止，这被称为"),s("strong",[this._v("贪婪模式")]),this._v("。\n除了贪婪模式，还有"),s("strong",[this._v("非贪婪模式")]),this._v("，即最小可能匹配。只要一发现匹配，就返回结果，不要往下检查。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 贪婪模式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 模式是/a+/，表示匹配1个a或多个a")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 因为默认是贪婪模式，会一直匹配到字符a不出现为止，所以匹配结果是3个a")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a+/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["aaa", index: 0, input: "aaa", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 非贪婪模式")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 模式结尾添加了一个问号/a+?/，改为非贪婪模式，一旦条件满足，就不再往下匹配")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// +?表示只要发现一个a，就不再往下匹配了。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'aaa'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/a+?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a", index: 0, input: "aaa", groups: undefined] ')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"非贪婪模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非贪婪模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 非贪婪模式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("如果想将贪婪模式改为非贪婪模式，可以在量词符后面加一个问号")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("+?")]),t._v("：表示某个模式出现"),a("code",[t._v("1")]),t._v("次或多次，匹配时采用非贪婪模式。")]),a("li",[a("code",[t._v("*?")]),t._v("：表示某个模式出现"),a("code",[t._v("0")]),t._v("次或多次，匹配时采用非贪婪模式。")]),a("li",[a("code",[t._v("??")]),t._v("：表格某个模式出现"),a("code",[t._v("0")]),t._v("次或"),a("code",[t._v("1")]),t._v("次，匹配时采用非贪婪模式。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'abb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/ab*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["abb"]')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'abb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/ab*?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a"]')]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("'abb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/ab?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["ab"]')]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'abb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/ab??/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ["a"]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_15、修饰符-g"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15、修饰符-g","aria-hidden":"true"}},[this._v("#")]),this._v(" 15、修饰符 - g")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("默认情况下，第一次匹配成功后，正则对象就停止向下匹配了。"),s("code",[this._v("g")]),this._v("修饰符表示全局匹配（"),s("code",[this._v("global")]),this._v("），加上它以后，正则对象将匹配全部符合条件的结果，主要用于搜索和替换。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 正则模式不含g修饰符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 每次都是从字符串头部开始匹配")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 连续做了三次匹配，都返回true")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/b/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则模式含有g修饰符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 每次都是从上一次匹配成功处，开始向后匹配")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/b/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abba'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nregex"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_16、修饰符-i"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16、修饰符-i","aria-hidden":"true"}},[this._v("#")]),this._v(" 16、修饰符 - i")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("默认情况下，正则对象区分字母的大小写，加上"),s("code",[this._v("i")]),this._v("修饰符以后表示"),s("strong",[this._v("忽略大小写")]),this._v("（"),s("code",[this._v("ignoreCase")]),this._v("）。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 加了i修饰符以后，不考虑大小写，所以模式abc匹配字符串ABC。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("abc"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ABC'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("abc"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'ABC'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_17、修饰符-m"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17、修饰符-m","aria-hidden":"true"}},[this._v("#")]),this._v(" 17、修饰符 - m")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("m")]),t._v("修饰符表示多行模式（"),a("code",[t._v("multiline")]),t._v("），会修改"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("的行为。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("默认情况下（即不加"),a("code",[t._v("m")]),t._v("修饰符时），"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("匹配字符串的开始处和结尾处，")]),a("li",[t._v("加上"),a("code",[t._v("m")]),t._v("修饰符以后，"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("还会匹配行首和行尾，即"),a("code",[t._v("^")]),t._v("和"),a("code",[t._v("$")]),t._v("会识别换行符（"),a("code",[t._v("\\n")]),t._v("）。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 字符串结尾处有一个换行符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果不加m修饰符，匹配不成功，因为字符串的结尾不是world")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 加上以后，$可以匹配行尾")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("world$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world\\n'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("world$"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello world\\n'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 匹配行首的b")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果不加m修饰符，就相当于b只能处在字符串的开始处。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 加上m修饰符以后，换行符\\n也会被认为是一行的开始。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("b"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a\\nb'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_18、组匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18、组匹配","aria-hidden":"true"}},[this._v("#")]),this._v(" 18、组匹配 - ()")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正则表达式的"),s("strong",[this._v("括号")]),this._v("表示分组匹配，括号中的模式可以用来匹配分组的内容。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 第一个模式没有括号，结果+只表示重复字母d")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第二个模式有括号，结果+就表示匹配fred这个词")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("fred"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'fredd'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fred"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'fredfred'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 分组捕获 ")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式/(.)b(.)/一共使用两个括号")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 第一个括号捕获a，第二个括号捕获c")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abcabc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/(.)b(.)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["abc", "a", "c", index: 0, input: "abcabc", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" matches "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'fredfred'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/(fred)+/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmatches "),a("span",{attrs:{class:"token comment"}},[t._v('// ["fredfred", "fred", index: 0, input: "fredfred", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 使用组匹配时，不宜同时使用g修饰符")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 否则match方法不会捕获分组的内容。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 带g修饰符的正则表达式，结果match方法只捕获了匹配整个表达式的部分。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abcabc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/(.)b(.)/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm "),a("span",{attrs:{class:"token comment"}},[t._v("// ['abc', 'abc']")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 使用正则表达式的exec方法，配合循环，才能读到每一轮匹配的组捕获。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abcabc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(.)b(.)/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("result"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["abc", "a", "c"]')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["abc", "a", "c"]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正则表达式内部，还可以用\\n引用括号匹配的内容，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// n是从1开始的自然数，表示对应顺序的括号。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\1表示第一个括号匹配的内容（即a）")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\2表示第二个括号匹配的内容（即c）。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token function"}},[t._v("b")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("b\\"),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"abcabc"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token function"}},[t._v("y")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\\"),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'yabccab'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 括号还可以嵌套")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// \\1指向外层括号，\\2指向内层括号。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token function"}},[t._v("y")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\\"),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'yabababab'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 组匹配非常有用，下面是一个匹配网页标签的例子。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 圆括号匹配尖括号之中的标签，而\\1就表示对应的闭合标签。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tagName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/<([^>]+)>[^<]*<\\/\\1>/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ntagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"<b>bold</b>"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 上面代码略加修改，就能捕获带有属性的标签。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// /ab*/表示如果a后面有多个b")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<b class=\"hello\">Hello</b><i>world</i>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/<(\\w)([^>]+)>(.*?)<\\/\\1>/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "<b class="hello">Hello</b>"')]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "b"')]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// " class="hello""')]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "Hello"')]),t._v("\n\nmatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "i"')]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// ""')]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v('// "world"')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_19、非捕获组-x"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19、非捕获组-x","aria-hidden":"true"}},[this._v("#")]),this._v(" 19、非捕获组 (?:x)")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("(?:x)")]),this._v("称为非捕获组（"),s("code",[this._v("Non-capturing group")]),this._v("），表示不返回该组匹配的内容，即匹配的结果中不计入这个括号。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 一共使用了两个括号。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 其中第一个括号是非捕获组，所以最后返回的结果中没有第一个括号，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 只有第二个括号匹配的内容。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/(?:.)b(.)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm "),a("span",{attrs:{class:"token comment"}},[t._v('// ["abc", "c", index: 0, input: "abc", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 前一个正则表达式是正常匹配，第一个括号返回网络协议；")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 后一个正则表达式是非捕获匹配，返回结果中不包括网络协议。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正常匹配")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nurl"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'http://google.com/'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["http://google.com/", "http", "google.com", "/", index: 0, ...]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 非捕获组匹配")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/(?:http|ftp):\\/\\/([^/\\r\\n]+)(\\/[^\\r\\n]*)?/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nurl"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'http://google.com/'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["http://google.com/", "google.com", "/", index: 0, ...]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_20、先行断言-x-y"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20、先行断言-x-y","aria-hidden":"true"}},[this._v("#")]),this._v(" 20、先行断言 x(?=y)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("x(?=y)")]),t._v("称为先行断言（"),a("code",[t._v("Positive look-ahead")]),t._v("），"),a("code",[t._v("x")]),t._v("只有在"),a("code",[t._v("y")]),t._v("前面才匹配，"),a("code",[t._v("y")]),t._v("不会被计入返回结果。“先行断言”中，括号里的部分是不会返回的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 后面跟着百分号的数字")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'100%'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/\\d+(?=%)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm "),a("span",{attrs:{class:"token comment"}},[t._v('// ["100", index: 0, input: "100%", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// b在c前面所以被匹配，但是括号对应的c不会被返回。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/b(?=c)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nm "),a("span",{attrs:{class:"token comment"}},[t._v('// ["b", index: 1, input: "abc", groups: undefined]')]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_21、先行否定断言-x-y"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21、先行否定断言-x-y","aria-hidden":"true"}},[this._v("#")]),this._v(" 21、先行否定断言 x(?!y)")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("x(?!y)")]),t._v("称为先行否定断言（"),a("code",[t._v("Negative look-ahead")]),t._v("），"),a("code",[t._v("x")]),t._v("只有不在"),a("code",[t._v("y")]),t._v("前面才匹配，"),a("code",[t._v("y")]),t._v("不会被计入返回结果。“先行否定断言”中，括号里的部分是不会返回的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 后面跟的不是百分号的数字")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" m "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'100dfgdfg%'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/\\d+(?!%)/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nm "),a("span",{attrs:{class:"token comment"}},[t._v('// ["100", index: 0, input: "100dfgdfg%", groups: undefined]')]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 只有不在小数点前面的数字才会被匹配，因此返回的结果就是14。")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("\\"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("exec")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'3.14'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v('// ["14", index: 2, input: "3.14", groups: undefined]')]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);