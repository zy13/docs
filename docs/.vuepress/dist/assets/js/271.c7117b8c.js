(window.webpackJsonp=window.webpackJsonp||[]).push([[271],{589:function(t,s,a){"use strict";a.r(s);var n=a(1),o=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("ul",[a("li",[a("a",{attrs:{href:"https://wangdoc.com/es6/operator.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("运算符的扩展"),a("OutboundLink")],1)]),a("li",[a("router-link",{attrs:{to:"/javascript-wd/2-operator/1-algorism.html"}},[t._v("算术运算符-10")])],1),a("li",[a("router-link",{attrs:{to:"/javascript-wd/2-operator/2-comparison.html"}},[t._v("比较运算符")])],1),a("li",[a("router-link",{attrs:{to:"/javascript-wd/2-operator/3-boolean.html"}},[t._v("布尔运算符")])],1),a("li",[a("router-link",{attrs:{to:"/javascript-wd/2-operator/4-binary.html"}},[t._v("二进制运算符")])],1),a("li",[a("router-link",{attrs:{to:"/javascript-wd/2-operator/5-other.html"}},[t._v("其它运算符")])],1),a("li",[a("router-link",{attrs:{to:"/javascript-wd/2-operator/6-instanceof.html"}},[t._v("instanceof运算符")])],1)]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),a("p",[t._v("使用这个运算符，有几个注意点。")]),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),a("p",[t._v("现在的规则是，如果多个逻辑运算符一起使用，必须用括号表明优先级，否则会报错。")]),t._m(21),t._m(22),t._m(23),t._m(24)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_1-指数运算符-es2016"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-指数运算符-es2016","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 指数运算符 ** - ES2016")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("ES2016 新增了一个指数运算符（"),s("code",[this._v("**")]),this._v("）。这个运算符的一个特点是"),s("strong",[this._v("右结合")]),this._v("，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("指数运算符可以与等号结合，形成一个新的赋值运算符（"),s("code",[this._v("**=")]),this._v("）")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 8")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于 2 ** (3 ** 2)")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 512")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1.5")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("**=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 a = a * a;")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{attrs:{class:"token operator"}},[t._v("**=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 b = b * b * b;")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_2-链判断运算符-es2020"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-链判断运算符-es2020","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 链判断运算符 ?. - ES2020")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("编程实务中，如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。比如，读取"),s("code",[this._v("message.body.user.firstName")]),this._v("这个属性，安全的写法是写成下面这样。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// firstName属性在对象的第四层，所以需要判断四次，每一层是否有值")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 错误的写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v("  firstName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'default'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 正确的写法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" firstName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message\n  "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" message"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body\n  "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" message"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user\n  "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" message"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'default'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 三元运算符?:也常用于判断对象是否存在。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 必须先判断fooInput是否存在，才能读取fooInput.value")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fooInput "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" myForm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'input[name=foo]'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fooValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fooInput "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" fooInput"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样的层层判断非常麻烦，因此 ES2020 引入了“链判断运算符”（optional chaining operator）"),s("code",[this._v("?.")]),this._v("，简化上面的写法。对于那些可能没有实现的方法，这个运算符尤其有用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// ?.运算符，直接在链式调用的时候判断")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 左侧的对象是否为null或undefined。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果是的，就不再往下运算，而是返回undefined。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" firstName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstName "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'default'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fooValue "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" myForm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'input[name=foo]'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 下面是判断对象方法是否存在，如果存在就立即执行的例子。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// iterator.return如果有定义，就会调用该方法，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 否则iterator.return直接返回undefined，不再执行?.后面的部分。")]),t._v("\niterator"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 老式浏览器的表单对象可能没有checkValidity()这个方法")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这时?.运算符就会返回undefined")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 判断语句就变成了undefined === false，所以就会跳过下面的代码。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myForm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("checkValidity"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 表单校验失败")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("链判断运算符"),s("code",[this._v("?.")]),this._v("有三种写法。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("obj?.prop")]),this._v(" // 对象属性是否存在")]),s("li",[s("code",[this._v("obj?.[expr]")]),this._v(" // 同上")]),s("li",[s("code",[this._v("func?.(...args)")]),this._v(" // 函数或对象方法是否存在")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 字符串的match()方法，如果没有发现匹配会返回null")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果发现匹配会返回一个数组，?.运算符起到了判断作用。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"#C0FFEE"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/#([A-Z]+)/i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ?.运算符常见形式，以及不使用该运算符时的等价形式")]),t._v("\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" undefined "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b\n\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" undefined "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果a?.b()里面的a.b有值，但不是函数，不可调用，那么a?.b()是会报错的")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// a?.()也是如此，如果a不是null或undefined，但也不是函数，那么a?.()会报错")]),t._v("\n\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("b")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" undefined "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("b")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("b")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" undefined "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("a")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("a")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("（1）短路机制。本质上，"),a("code",[t._v("?.")]),t._v("运算符相当于一种短路机制，只要不满足条件，就不再往下执行。")]),a("li",[t._v("（2）括号的影响。如果属性链有圆括号，链判断运算符对圆括号外部没有影响，只对圆括号内部有影响。一般来说，使用?.运算符的场合，不应该使用圆括号。")]),a("li",[t._v("（3）报错场合。")]),a("li",[t._v("（4）右侧不得为十进制数值。为了保证兼容以前的代码，允许"),a("code",[t._v("foo?.3:0")]),t._v("被解析成"),a("code",[t._v("foo ? .3 : 0")]),t._v("，因此规定如果"),a("code",[t._v("?.")]),t._v("后面紧跟一个十进制数字，那么"),a("code",[t._v("?.")]),t._v("不再被看成是一个完整的运算符，而会按照三元运算符进行处理，也就是说，那个小数点会归属于后面的十进制数字，形成一个小数。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 如果a是undefined或null，那么x不会进行递增运算。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 也就是说，链判断运算符一旦为真，右侧的表达式就不再求值。")]),t._v("\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\na "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" undefined "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("x"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ?.对圆括号外部没有影响，不管a对象是否存在，圆括号后面的.c总是会执行。")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" undefined "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("c\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 报错场合")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 构造函数")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("a")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("a")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("b")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 链判断运算符的右侧有模板字符串")]),t._v("\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`{b}`")])]),t._v("\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b"),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`{c}`")])]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 链判断运算符的左侧是 super")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("super")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("super")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 链运算符用于赋值运算符左侧")]),t._v("\na"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" c\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_3-null-判断运算符-es2020"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-null-判断运算符-es2020","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. Null 判断运算符 ?? - ES2020")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("读取对象属性的时候，如果某个属性的值是"),s("code",[this._v("null")]),this._v("或"),s("code",[this._v("undefined")]),this._v("，有时候需要为它们指定默认值。常见做法是通过"),s("code",[this._v("||")]),this._v("运算符指定默认值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 下面三行行代码都通过||运算符指定默认值，但是这样写是错的")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 开发者的原意是，只要属性的值为null或undefined，默认值就会生效，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 但是属性的值如果为空字符串或false或0，默认值也会生效。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" headerText "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerText "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Hello, world!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animationDuration "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("animationDuration "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("300")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" showSplashScreen "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("showSplashScreen "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为了避免这种情况，ES2020 引入了一个新的 "),a("code",[t._v("Null")]),t._v(" 判断运算符"),a("code",[t._v("??")]),t._v("。它的行为类似"),a("code",[t._v("||")]),t._v("，但是只有运算符左侧的值为"),a("code",[t._v("null")]),t._v("或"),a("code",[t._v("undefined")]),t._v("时，才会返回右侧的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个运算符的一个目的，就是跟链判断运算符"),s("code",[this._v("?.")]),this._v("配合使用，为"),s("code",[this._v("null")]),this._v("或"),s("code",[this._v("undefined")]),this._v("的值设置默认值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 默认值只有在左侧属性值为null或undefined时，才会生效。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" headerText "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headerText "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Hello, world!'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animationDuration "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("animationDuration "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("300")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" showSplashScreen "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("showSplashScreen "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果response.settings是null或undefined")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// response.settings.animationDuration是null或undefined，就会返回默认值300")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 也就是说，这一行代码包括了两级属性的判断。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" animationDuration "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" response"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("settings"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("animationDuration "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("300")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这个运算符很适合判断函数参数是否赋值")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 判断props参数的enabled属性是否赋值")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Component")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" enable "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" props"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enabled "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// …")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 基本等同于下面的写法。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Component")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enabled"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" enable "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" props"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// …")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("??")]),this._v("本质上是逻辑运算，它与其他两个逻辑运算符"),s("code",[this._v("&&")]),this._v("和"),s("code",[this._v("||")]),this._v("有一个优先级问题，它们之间的优先级到底孰高孰低。优先级的不同，往往会导致逻辑运算的结果不同。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 报错")]),t._v("\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" middle "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" rhs\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" middle "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" rhs\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" middle "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" rhs\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" middle "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" rhs\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 必须加入表明优先级的括号")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" middle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middle "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" middle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middle "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" middle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middle "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" middle"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlhs "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middle "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_4-逻辑赋值运算符-es2021"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-逻辑赋值运算符-es2021","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. 逻辑赋值运算符 - ES2021")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("ES2021 引入了三个新的逻辑赋值运算符（logical assignment operators），将逻辑运算符与赋值运算符进行结合。这三个运算符"),a("code",[t._v("||=")]),t._v("、"),a("code",[t._v("&&=")]),t._v("、"),a("code",[t._v("??=")]),t._v("相当于"),a("strong",[t._v("先进行逻辑运算，然后根据运算结果，再视情况进行赋值运算")]),t._v("。它们的一个用途是，为变量或属性设置默认值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 或赋值运算符")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 与赋值运算符")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Null 赋值运算符")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// user.id属性如果不存在，则设为1，新的写法比老的写法更紧凑一些。")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 老的写法")]),t._v("\nuser"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 新的写法")]),t._v("\nuser"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("id "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 参数对象opts如果不存在属性foo和属性bar，则为这两个属性设置默认值。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("example")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baz "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baz "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'qux'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 有了“Null 赋值运算符”以后，就可以统一写成下面这样。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("example")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("baz "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'qux'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])}],!1,null,null,null);s.default=o.exports}}]);