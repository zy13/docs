(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{428:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[a("a",{attrs:{href:"https://www.wangdoc.com/javascript/operators/comparison.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("比较运算符"),a("OutboundLink")],1)]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),a("p",[t._v("如果两个运算子之中，至少有一个不是字符串，需要分成以下两种情况。")]),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_1、概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、概述","aria-hidden":"true"}},[this._v("#")]),this._v(" 1、概述")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("比较运算符用于比较两个值的大小，然后返回一个布尔值，表示是否满足指定的条件。"),a("strong",[t._v("比较运算符可以比较各种类型的值，不仅仅是数值")]),t._v("。"),a("code",[t._v("JavaScript")]),t._v(" 一共提供了"),a("code",[t._v("8")]),t._v("个比较运算符，分成"),a("strong",[t._v("相等比较和非相等比较")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("对于"),a("strong",[t._v("非相等")]),t._v("的比较，算法是先看两个运算子是否都是"),a("strong",[t._v("字符串")]),t._v("，如果是的，就按照"),a("strong",[t._v("字典顺序")]),t._v("比较（实际上是比较 "),a("code",[t._v("Unicode")]),t._v(" 码点）")]),a("li",[t._v("否则，将两个运算子都转成"),a("strong",[t._v("数值")]),t._v("，再比较数值的"),a("strong",[t._v("大小")]),t._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" 大于运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" 小于运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" 小于或等于运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" 大于或等于运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" 相等运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" 严格相等运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" 不相等运算符\n"),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" 严格不相等运算符\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_2、非相等运算符：字符串的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、非相等运算符：字符串的比较","aria-hidden":"true"}},[this._v("#")]),this._v(" 2、非相等运算符：字符串的比较")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("字符串"),s("strong",[this._v("按照字典顺序进行比较")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("code",[t._v("JavaScript")]),t._v(" 引擎内部首先比较首字符的 "),a("code",[t._v("Unicode")]),t._v(" 码点。如果相等，再比较第二个字符的 "),a("code",[t._v("Unicode")]),t._v(" 码点，以此类推。")]),a("li",[t._v("所有字符都有 "),a("code",[t._v("Unicode")]),t._v(" 码点，因此汉字也可以比较")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'cat'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'dog'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'cat'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'catalog'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 小写的c的 Unicode 码点（99）")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 大写的C的 Unicode 码点（67）")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'cat'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'Cat'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true'")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// “大”的 Unicode 码点是22823")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// “小”是23567")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'大'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'小'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_3、非相等运算符：非字符串的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、非相等运算符：非字符串的比较","aria-hidden":"true"}},[this._v("#")]),this._v(" 3、非相等运算符：非字符串的比较")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（1）原始类型值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（1）原始类型值","aria-hidden":"true"}},[this._v("#")]),this._v(" （1）原始类型值")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果两个运算子"),s("strong",[this._v("都是原始类型的值，则是先转成数值再比较")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("strong",[this._v("任何值（包括"),s("code",[this._v("NaN")]),this._v("本身）与"),s("code",[this._v("NaN")]),this._v("使用非相等运算符进行比较，返回的都是"),s("code",[this._v("false")]),this._v("。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 字符串和布尔值都会先转成数值，再进行比较")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'4'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 5 > Number('4')")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 5 > 4")]),t._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 Number(true) > Number(false)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 1 > 0")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 2 > Number(true)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 2 > 1")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 任何值与NaN比较，返回的都是false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"（2）对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#（2）对象","aria-hidden":"true"}},[this._v("#")]),this._v(" （2）对象")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果运算子是"),s("strong",[this._v("对象，会转为原始类型的值，再进行比较")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对象转换成原始类型的值，算法是先调用"),a("code",[t._v("valueOf")]),t._v("方法；如果返回的还是对象，再接着调用"),a("code",[t._v("toString")]),t._v("方法，然后"),a("strong",[t._v("照字典顺序进行")]),t._v("，逐个字符的"),a("code",[t._v("Unicode")]),t._v("码进行比较。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 运算子是对象，会转为原始类型的值，再进行比较")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'11'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 [2].valueOf().toString() > '11'")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 '2' > '11'")]),t._v("\n\nx"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("valueOf")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'11'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 [2].valueOf() > '11'")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 '1' > '11'")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 两个对象之间的比较")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 [2].valueOf().toString() > [1].valueOf().toString()")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 '2' > '1'")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("11")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 [2].valueOf().toString() > [11].valueOf().toString()")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 '2' > '11'")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" x"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 { x: 2 }.valueOf().toString() >= { x: 1 }.valueOf().toString()")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 即 '[object Object]' >= '[object Object]'")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_4、严格相等运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、严格相等运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 4、严格相等运算符 ===")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("严格相等运算符（"),s("code",[this._v("===")]),this._v("）比较两个值是否为“同一个值”，如果两个值不是同一类型，严格相等运算符（"),s("code",[this._v("===")]),this._v("）直接返回"),s("code",[this._v("false")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("strong",[t._v("不同类型的值")]),t._v("。如果两个值的类型不同，直接返回"),a("code",[t._v("false")]),t._v("。")]),a("li",[a("strong",[t._v("同一类的原始类型值")]),t._v("。值相同就返回"),a("code",[t._v("true")]),t._v("，值不同就返回"),a("code",[t._v("false")]),t._v("。")]),a("li",[a("strong",[t._v("复合类型值")]),t._v("。两个复合类型（对象、数组、函数）比较它们是否指向同一个地址。")]),a("li",[a("strong",[t._v("undefined 和 null")]),t._v("。"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("与自身严格相等。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v('// 数值的1与字符串的“1”、布尔值的true与字符串"true"，因为类型不同，结果都是false。')]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"true"')]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 十进制的1与十六进制的1，因为类型和值都相同，返回true")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0x1")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// NaN与任何值都不相等（包括自身）。另外，正0等于负0。")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 分别比较两个空对象、两个空数组、两个空函数，结果都是不相等")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 运算符两边的空对象、空数组、空函数的值，都存放在不同的内存地址")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果两个变量引用同一个对象，则它们相等。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对于两个对象的比较，严格相等运算符比较的是地址，而大于或小于运算符比较的是值")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv1 "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" v2 "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 前两个比较的是值，最后一个比较的是地址")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj1 "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" obj2 "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nobj1 "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" obj2 "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nobj1 "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj2 "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// undefined和null与自身严格相等")]),t._v("\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 变量声明后默认值是undefined，因此两个只声明未赋值的变量是相等的")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v1"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v2"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nv1 "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" v2 "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_5、严格不相等运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5、严格不相等运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 5、严格不相等运算符 !==")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("“严格不相等运算符”（!==），它的算法就是"),s("strong",[this._v("先求严格相等运算符的结果，然后返回相反值")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 感叹号!是求出后面表达式的相反值")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_6、相等运算符-不建议使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6、相等运算符-不建议使用","aria-hidden":"true"}},[this._v("#")]),this._v(" 6、相等运算符 == 不建议使用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("相等运算符（"),s("code",[this._v("==")]),this._v("）"),s("strong",[this._v("比较两个值是否相等")]),this._v("。比较不同类型的数据时，相等运算符会先将数据进行类型转换，然后再用严格相等运算符比较。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("strong",[t._v("原始类型值")]),t._v("。原始类型的值会转换成数值再进行比较。")]),a("li",[a("strong",[t._v("对象与原始类型值比较")]),t._v("。对象（这里指广义的对象，包括数组和函数）与原始类型的值比较时，"),a("strong",[t._v("对象转换成原始类型的值")]),t._v("，再进行比较。先调用对象的"),a("code",[t._v("valueOf()")]),t._v("方法，如果得到原始类型的值，就按照上一小节的规则，互相比较；如果得到的还是对象，则再调用"),a("code",[t._v("toString()")]),t._v("方法，得到字符串形式，再进行比较。")]),a("li",[a("strong",[t._v("undefined 和 null")]),t._v("。"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("只有与自身比较，或者互相比较时，才会返回"),a("code",[t._v("true")]),t._v("；与其他类型的值比较时，结果都为"),a("code",[t._v("false")]),t._v("。")]),a("li",[a("strong",[t._v("相等运算符的缺点")]),t._v("。相等运算符隐藏的类型转换，会带来一些违反直觉的结果。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 将字符串和布尔值都转为数值，然后再进行比较")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true ")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 1 === Number(true)")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 0 === Number(false)")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 2 === Number(true)")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 2 === Number(false)")]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("'true'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 Number('true') === Number(true)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 NaN === 1")]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 Number('') === 0")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 0 === 0")]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 Number('') === Number(false)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 0 === 0")]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 Number('1') === Number(true)")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于 1 === 1")]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("'\\n  123  \\t'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true 因为字符串转为数字时，省略前置和后置的空格")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 数组与数值的比较")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// JavaScript 引擎会先对数组[1]调用数组的valueOf()方法，由于返回的还是一个数组，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 所以会接着调用数组的toString()方法，得到字符串形式，再按照上一小节的规则进行比较。")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 数组与字符串的比较")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1,2'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对象与布尔值的比较")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// obj是一个自定义了valueOf()和toString()方法的对象。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这个对象与字符串'foo'进行比较时，会依次调用valueOf()和toString()方法，")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 最后返回'foo'，所以比较结果是true。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valueOf"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'执行 valueOf()'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  toString"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'执行 toString()'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'foo'")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 执行 valueOf()")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 执行 toString()")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// undefined和null只有与自身比较，或者互相比较时，才会返回true")]),t._v("\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nundefined "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 与其他类型的值比较时，结果都为false。")]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 这些表达式都不同于直觉，很容易出错")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 因此建议不要使用相等运算符（==），最好只使用严格相等运算符（===）")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("             "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'0'")]),t._v("            "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("           "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("          "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'false'")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'0'")]),t._v("        "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined  "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("       "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" undefined   "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{attrs:{class:"token string"}},[t._v("' \\t\\r\\n '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("     "),a("span",{attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"_7、不相等运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7、不相等运算符","aria-hidden":"true"}},[this._v("#")]),this._v(" 7、不相等运算符 !=")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("相等运算符有一个对应的“不相等运算符”（"),s("code",[this._v("!=")]),this._v("），它的算法就是"),s("strong",[this._v("先求相等运算符的结果，然后返回相反值")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'1'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])}],!1,null,null,null);s.default=e.exports}}]);